import os
import logging
import random
import asyncio
import json
import uuid
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from openai import AsyncOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GameStates(StatesGroup):
    choosing_gender = State()
    choosing_name = State()
    choosing_class = State()
    class_confirmation = State()
    in_town = State()
    in_market = State()
    in_tavern = State()
    in_dungeon = State()
    in_battle = State()
    in_inventory = State()
    dungeon_room = State()
    battle_turn = State()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
class GameConfig:
    MAX_INVENTORY_SLOTS = 10
    LEVELS_EXP = {
        1: 1000, 2: 2150, 3: 3472, 4: 4992, 5: 6742,
        6: 8753, 7: 11066, 8: 13726, 9: 16785, 10: 20302,
        11: 24348, 12: 29001
    }
    BASE_HEALTH = {
        "warrior": 10, "mage": 6, "rogue": 8, 
        "priest": 8, "archer": 10, "merchant": 8
    }
    HEALTH_PER_LEVEL = {
        "warrior": 6, "mage": 6, "rogue": 5, 
        "priest": 5, "archer": 6, "merchant": 5
    }
    SAVE_COST = 50

# –ú–æ–Ω—Å—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π
MONSTERS = {
    "easy": [
        {"name": "–°–∫–µ–ª–µ—Ç", "health": 15, "damage": "1d6", "exp": 100, "gold": "1d10"},
        {"name": "–ì–æ–±–ª–∏–Ω", "health": 12, "damage": "1d4", "exp": 80, "gold": "1d8"},
        {"name": "–í–æ–ª–∫", "health": 10, "damage": "1d4", "exp": 60, "gold": "1d6"}
    ],
    "medium": [
        {"name": "–û—Ä–∫", "health": 25, "damage": "1d8", "exp": 200, "gold": "2d10"},
        {"name": "–¢—Ä–æ–ª–ª—å", "health": 30, "damage": "1d10", "exp": 250, "gold": "3d8"},
        {"name": "–ü—Ä–∏–∑—Ä–∞–∫", "health": 20, "damage": "1d6", "exp": 180, "gold": "2d6"}
    ],
    "hard": [
        {"name": "–î—Ä–∞–∫–æ–Ω", "health": 50, "damage": "2d10", "exp": 500, "gold": "5d20"},
        {"name": "–î–µ–º–æ–Ω", "health": 45, "damage": "2d8", "exp": 450, "gold": "4d15"},
        {"name": "–õ–∏—á", "health": 40, "damage": "2d6", "exp": 400, "gold": "3d20"}
    ]
}

# –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä—ã–Ω–∫–∞
ITEMS = {
    "consumables": [
        {"name": "–ü—Ä–æ–≤–∏–∞–Ω—Ç", "price": 10, "type": "food", "stackable": True, "max_stack": 3},
        {"name": "–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", "price": 15, "type": "camp", "stackable": True, "max_stack": 3},
        {"name": "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "price": 25, "type": "potion", "heal": 20},
        {"name": "–ó–µ–ª—å–µ –º–∞–Ω—ã", "price": 30, "type": "potion", "mana": 15}
    ],
    "weapons": [
        {"name": "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", "price": 100, "type": "weapon", "damage": "+1d4", "class": "warrior"},
        {"name": "–î—É–±–æ–≤—ã–π –ø–æ—Å–æ—Ö", "price": 80, "type": "weapon", "damage": "+1d4", "class": "mage"},
        {"name": "–û—Ö–æ—Ç–Ω–∏—á–∏–π –ª—É–∫", "price": 90, "type": "weapon", "damage": "+1d4", "class": "archer"},
        {"name": "–°–≤—è—â–µ–Ω–Ω—ã–π –º–æ–ª–æ—Ç", "price": 95, "type": "weapon", "damage": "+1d4", "class": "priest"}
    ],
    "armor": [
        {"name": "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "price": 70, "type": "armor", "defense": 2, "class": "rogue"},
        {"name": "–ö–æ–ª—å—á—É–≥–∞", "price": 120, "type": "armor", "defense": 4, "class": "warrior"},
        {"name": "–ú–∞–Ω—Ç–∏—è –º–∞–≥–∞", "price": 90, "type": "armor", "defense": 1, "class": "mage"},
        {"name": "–†–æ–±–∞ —Å–≤—è—â–µ–Ω–Ω–∏–∫–∞", "price": 85, "type": "armor", "defense": 2, "class": "priest"}
    ]
}

# –ö–≤–µ—Å—Ç—ã
QUESTS = {
    5: {
        "title": "–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤",
        "description": "–ü–æ–±–µ–¥–∏—Ç—å –±–æ—Å—Å–∞ –≤ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
        "reward_exp": 500,
        "reward_gold": 100,
        "required_level": 5
    },
    10: {
        "title": "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞", 
        "description": "–ü–æ–±–µ–¥–∏—Ç—å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
        "reward_exp": 1000,
        "reward_gold": 250,
        "required_level": 10
    },
    12: {
        "title": "–§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞",
        "description": "–ü–æ–±–µ–¥–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Å—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
        "reward_exp": 2000,
        "reward_gold": 500,
        "required_level": 12
    }
}

# –ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
CLASSES = {
    "warrior": {
        "name": "–ú–µ—á–Ω–∏–∫",
        "description": "–ü–æ–¥–æ–±–Ω–æ –≤–æ–ª–Ω–∞–º –±–µ–∑–±—Ä–µ–∂–Ω–æ–≥–æ –º–æ—Ä—è, —É–ø–æ—Ä–Ω–æ –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ...",
        "skills": ["–ú–æ—â–Ω—ã–π —É–¥–∞—Ä", "–ó–∞ –∑–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞", "–û–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á"],
        "damage": "1d8"
    },
    "mage": {
        "name": "–ú–∞–≥",
        "description": "–ñ–∏–∑–Ω—å –º–∞–≥–∞ - —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –ø–æ–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ...",
        "skills": ["–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", "–õ–µ–¥—è–Ω–∞—è –ª–æ–≤—É—à–∫–∞", "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä"],
        "damage": "1d6"
    },
    "rogue": {
        "name": "–í–æ—Ä", 
        "description": "–û–Ω–∏ –Ω–µ –∂–∞–ª–µ—é—Ç –Ω–∏–∫–æ–≥–æ...",
        "skills": ["–¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä", "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–Ω–æ–∫", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ"],
        "damage": "1d6"
    },
    "priest": {
        "name": "–ü–æ—Å–ª—É—à–Ω–∏–∫",
        "description": "–ì–æ—Å–ø–æ–¥—å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤–æ–∏–º —Å–ª—É–∂–∏—Ç–µ–ª—è–º –ø—Ä–æ–ª–∏–≤–∞—Ç—å –∫—Ä–æ–≤—å...",
        "skills": ["–°–≤—è—Ç–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ", "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ç–∞", "–ù–µ–±–µ—Å–Ω–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ"],
        "damage": "1d4"
    },
    "archer": {
        "name": "–õ—É—á–Ω–∏–∫",
        "description": "–õ—É—á–Ω–∏–∫ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å—Å—è –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...",
        "skills": ["–¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª", "–°—Ç—Ä–µ–ª–∞ –æ–≥–Ω—è", "–î–≤–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª"],
        "damage": "1d8"
    },
    "merchant": {
        "name": "–¢–æ—Ä–≥–æ–≤–µ—Ü",
        "description": "–•–æ—Ä–æ—à–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü –∑–Ω–∞–µ—Ç, –∫–æ–≥–¥–∞ –∏ –≥–¥–µ –ø–æ–∫—É–ø–∞—Ç—å...",
        "skills": ["–¢–æ—Ä–≥–æ–≤—ã–π —Ç—Ä—é–∫", "–£–¥–∞—Ä –∫—É–ø—Ü–∞", "–°–¥–µ–ª–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏"],
        "damage": "1d4"
    }
}

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä—ã
class GameUtils:
    @staticmethod
    def roll_dice(dice_str: str) -> int:
        if 'd' in dice_str:
            parts = dice_str.split('d')
            count = int(parts[0]) if parts[0] else 1
            sides = int(parts[1])
            return sum(random.randint(1, sides) for _ in range(count))
        return int(dice_str)

    @staticmethod
    def calculate_damage(attacker: Any, defender: Any, skill: Optional[str] = None) -> Tuple[int, str]:
        base_damage = GameUtils.roll_dice(attacker.get('damage', '1d4'))
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ 20)
        attack_roll = random.randint(1, 20)
        is_critical = attack_roll == 20
        
        if is_critical:
            base_damage *= 2
            message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! üí•"
        elif attack_roll >= 10:
            message = "–£–¥–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç! ‚öîÔ∏è"
        else:
            return 0, "–ü—Ä–æ–º–∞—Ö! ‚ùå"
        
        # –£—á–µ—Ç –∑–∞—â–∏—Ç—ã
        defense = defender.get('defense', 0)
        final_damage = max(1, base_damage - defense)
        
        return final_damage, message

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–π
class StoryGenerator:
    @staticmethod
    async def generate_intro(gender: str, class_name: str, character_name: str) -> str:
        try:
            prompt = f"–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è RPG –∏–≥—Ä—ã. –ü–µ—Ä—Å–æ–Ω–∞–∂: {gender}, –∫–ª–∞—Å—Å: {class_name}, –∏–º—è: {character_name}."
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=150
            )
            content = response.choices[0].message.content
            return content.strip() if content else ""
        except:
            stories = [
                f"–î—Ä–µ–≤–Ω–µ–µ –∑–ª–æ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è. {character_name}, –∫–∞–∫ {class_name}, –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥—Ä–æ–∑—É.",
                f"–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –≤ —Ö–∞–æ—Å–µ –≤–æ–π–Ω—ã. {character_name} –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π.",
                f"–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ—è–≤–ª—è—é—Ç —Å–∏–ª—É. {character_name} –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏—Ö –¥–æ —Ç–µ–º–Ω—ã—Ö —Å–∏–ª."
            ]
            return random.choice(stories)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    print("Starting Telegram RPG Bot...")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        await message.answer("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG –∏–≥—Ä—É! –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())