# -*- coding: utf-8 -*-
# app/features/character.py
from __future__ import annotations

from typing import Dict, List

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from app.core.storage import get_player
from app.ui.keyboards import city_menu_kb

router = Router()

def ability_uses_for_level(key: str, level: int, class_key: str) -> int:
    """
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞: –º–∞–∫—Å. –∑–∞—Ä—è–¥—ã —É–º–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ.
    (–ó–¥–µ—Å—å –æ—Å—Ç–∞–≤—å —Ç–≤–æ—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É; –ø—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π.)
    """
    table = {
        1: 3,
        2: 4,
        3: 5,
    }
    return table.get(level, 3)

@router.message(F.text.in_(["üßç –ü–µ—Ä—Å–æ–Ω–∞–∂", "–ü–µ—Ä—Å–æ–Ω–∞–∂"]))
async def open_character(message: types.Message, state: FSMContext):
    p = get_player(message.from_user.id)

    lines: List[str] = [
        "üßç <b>–ü–µ—Ä—Å–æ–Ω–∞–∂</b>",
        f"üè∑Ô∏è –ò–º—è: {p.name}",
        f"ü™™ –ö–ª–∞—Å—Å: {getattr(p, 'class_emoji', '‚öîÔ∏è')} {getattr(p, 'class_title', p.class_label)}",
        f"‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: {p.level}",
        f"üî∞ –û–ø—ã—Ç: {p.exp} / {p.exp_to_next}",
        "",
        "üìò <b>–£–º–µ–Ω–∏—è</b>",
        "–ò–∑—É—á–µ–Ω–Ω—ã–µ:",
    ]

    if p.abilities_known:
        charges: Dict[str, int] = getattr(p, "ability_charges", {})
        for key, lvl in p.abilities_known.items():
            meta = p.ability_meta.get(key, {"emoji": "‚ú®", "title": key, "uses_by_level": {lvl: ability_uses_for_level(key, lvl, p.class_key)}})
            max_uses = meta.get("uses_by_level", {}).get(lvl, ability_uses_for_level(key, lvl, p.class_key))
            cur_uses = charges.get(key, max_uses)
            lines.append(f"‚Ä¢ {meta['emoji']} {meta['title']} ‚Äî —É—Ä. {lvl}  (–∏—Å–ø.: {cur_uses}/{max_uses})")
    else:
        lines.append("‚Äî")

    # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ/—É–ª—É—á—à–µ–Ω–∏–µ ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è available_abilities, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë
    if hasattr(p, "available_abilities"):
        lines.append("\n–ú–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å/—É–ª—É—á—à–∏—Ç—å:")
        options = p.available_abilities()
        for i, opt in enumerate(options, start=1):
            emoji = opt.get("emoji", "‚ú®")
            title = opt.get("title", opt.get("key", "–£–º–µ–Ω–∏–µ"))
            lvl = opt.get("next_level", 1)
            uses_by_level = opt.get("uses_by_level", {})
            after_uses = uses_by_level.get(lvl, "‚àû")
            tag = "–ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è" if opt.get("already_known") else "–ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏"
            lines.append(f"{i}. {emoji} {title} ‚Äî {('—É–ª—É—á—à–∏—Ç—å –¥–æ ' + str(lvl)) if opt.get('already_known') else '–Ω–æ–≤–æ–µ'} "
                         f"(–∑–∞—Ä—è–¥—ã {tag}: {after_uses})")

    await message.answer("\n".join(lines), reply_markup=city_menu_kb())
