# -*- coding: utf-8 -*-
# app/features/creation.py
from __future__ import annotations

from typing import Dict
import random

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.core.storage import get_player, save_player, Player
from app.core.config import USE_OPENAI, oai_client
from app.ui.keyboards import gender_kb, classes_kb, confirm_kb, city_menu_kb

router = Router()

# ---------- FSM: —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ ----------
class CreateFlow(StatesGroup):
    ask_name = State()

# –ù–∞–∑–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏ –∫–ª–∞—Å—Å–æ–≤
CLASS_LABELS = {
    "swordsman": "üó°Ô∏è –ú–µ—á–Ω–∏–∫",
    "acolyte":   "‚ú® –ü–æ—Å–ª—É—à–Ω–∏–∫",
    "mage":      "üîÆ –ú–∞–≥",
    "archer":    "üèπ –õ—É—á–Ω–∏–∫",
    "merchant":  "üßæ –¢–æ—Ä–≥–æ–≤–µ—Ü",
    "thief":     "üóùÔ∏è –í–æ—Ä",
}

# –û–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ (–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ)
CLASS_DESCRIPTIONS = {
    "swordsman": (
        "–ü–æ–¥–æ–±–Ω–æ –≤–æ–ª–Ω–∞–º –±–µ–∑–±—Ä–µ–∂–Ω–æ–≥–æ –º–æ—Ä—è, —É–ø–æ—Ä–Ω–æ –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–æ, –º–µ—á–Ω–∏–∫ –∏–¥—ë—Ç –ø–æ –ø—É—Ç–∏ –ø–æ–∑–Ω–∞–Ω–∏—è —Å–∏–ª—ã, "
        "–æ—Ç—Ç–∞—á–∏–≤–∞—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏ –∑–∞–∫–∞–ª—è—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –í –±–æ—é –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏ —Ö—Ä–∞–±—Ä–æ—Å—Ç—å."
    ),
    "mage": (
        "–ñ–∏–∑–Ω—å –º–∞–≥–∞ ‚Äî —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –ø–æ–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ. –†–∞–¥–∏ —ç—Ç–æ–≥–æ –æ–Ω –ø–æ–∫–∏–¥–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å, "
        "—á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ –∏ –¥–æ–±—ã—Ç—å –∑–Ω–∞–Ω–∏–µ ‚Äî —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–∂–µ –∑–æ–ª–æ—Ç–∞. –ü–æ–∑–Ω–∞–≤ —Å–∏–ª—ã –ø—Ä–∏—Ä–æ–¥—ã, –º–∞–≥ –ø–æ—Ä–∞–∂–∞–µ—Ç –≤—Ä–∞–≥–æ–≤ "
        "–æ–≥–Ω—ë–º, –ª—å–¥–æ–º –∏ –º–æ–ª–Ω–∏—è–º–∏."
    ),
    "thief": (
        "–û–Ω–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∫–æ–¥–µ–∫—Å—É. –£ –í–æ—Ä–æ–≤ –µ—Å—Ç—å –ì–∏–ª—å–¥–∏—è –∏ —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞. –í –±–æ—é –≤–æ—Ä –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–µ –Ω–∞ "
        "—Å–∏–ª—É, –∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —É–∫–ª–æ–Ω–µ–Ω–∏–µ."
    ),
    "acolyte": (
        "–°–ª—É–∂–∏—Ç–µ–ª—å —Å–≤–µ—Ç–∞, —É–º–µ—é—â–∏–π –∏—Å—Ü–µ–ª—è—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–µ–±—è. –í –±–æ—é –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∏ –±—É–ª–∞–≤—É, "
        "–Ω–æ –µ–≥–æ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –∏ –∏—Å—Ü–µ–ª—è—Ç—å."
    ),
    "archer": (
        "–õ—É—á–Ω–∏–∫ –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ –∑–æ—Ä–∫–∏–π –≥–ª–∞–∑ –∏ —Ç—É–≥–æ–π –ª—É–∫. –°–ª–∞–± –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é, –Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ "
        "—Ö–æ—Ä–æ—à–µ–≥–æ —Å—Ç—Ä–µ–ª–∫–∞ –Ω–µ–ø—Ä–æ—Å—Ç–æ."
    ),
    "merchant": (
        "–•–æ—Ä–æ—à–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü –∑–Ω–∞–µ—Ç, —á—Ç–æ, –∫–æ–≥–¥–∞ –∏ –≥–¥–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –∫–æ–º—É –ø—Ä–æ–¥–∞–≤–∞—Ç—å. –û–Ω —Ö–∏—Ç—ë—Ä –∏ –ø—Ä–∞–∫—Ç–∏—á–µ–Ω, "
        "—É–º–µ–µ—Ç –ø—Ä–æ–≤–µ—Ä–Ω—É—Ç—å –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É –¥–∞–∂–µ –≤ –¥–æ—Ä–æ–≥–µ."
    ),
}

# –£–º–µ–Ω–∏—è
CLASS_ABILITIES: Dict[str, Dict[str, Dict[str, str]]] = {
    "swordsman": {
        "active": {
            "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä": "üó°Ô∏è –ú–æ—â–Ω—ã–π —É–¥–∞—Ä ‚Äì –ú–µ—á–Ω–∏–∫ –Ω–∞–Ω–æ—Å–∏—Ç –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –Ω–∞–Ω–æ—Å—è—â–∏–π –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω.",
            "–ó–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞": "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞ ‚Äì –ü–æ–≤—ã—à–∞–µ—Ç –±—Ä–æ–Ω—é –Ω–∞ 50% –Ω–∞ 1 —Ö–æ–¥.",
            "–û–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á": "üó°Ô∏èüî• –û–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á ‚Äì +25% —É—Ä–æ–Ω–∞ –∏ –¥–æ–ø. —É—Ä–æ–Ω –æ–≥–Ω—ë–º 2 —Ö–æ–¥–∞.",
        },
        "passive": {
            "–ë–æ–µ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": "üí™ –ë–æ–µ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å ‚Äì +10% –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é.",
            "–£–¥–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏–Ω–∫—Ç":   "üéØ –£–¥–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏–Ω–∫—Ç ‚Äì +5% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ (1 —Ö–æ–¥).",
        },
        "start": ("–ú–æ—â–Ω—ã–π —É–¥–∞—Ä", "üó°Ô∏è"),
    },
    "mage": {
        "active": {
            "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä": "üîÆüî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä ‚Äì –í–∑—Ä—ã–≤–Ω–æ–π —É—Ä–æ–Ω –ø–æ —Ü–µ–ª–∏/–æ–±–ª–∞—Å—Ç–∏.",
            "–õ–µ–¥—è–Ω–∞—è –ª–æ–≤—É—à–∫–∞": "üîÆ‚ùÑÔ∏è –õ–µ–¥—è–Ω–∞—è –ª–æ–≤—É—à–∫–∞ ‚Äì –ó–∞–º–æ—Ä–æ–∑–∫–∞ —Ü–µ–ª–∏ –Ω–∞ 1 —Ö–æ–¥.",
            "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä": "üîÆüõ°Ô∏è –ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä ‚Äì –ü–æ–≥–ª–æ—â–∞–µ—Ç —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏.",
        },
        "passive": {
            "–≠–Ω–µ—Ä–≥–∏—è –≤–æ–ª–∏": "üîÆ –≠–Ω–µ—Ä–≥–∏—è –≤–æ–ª–∏ ‚Äì +10% –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é.",
            "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫": "üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ ‚Äì –ü–æ—Å–ª–µ –º–∞–≥–∏–∏ +5% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞ (1 —Ö–æ–¥).",
        },
        "start": ("–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", "üîÆüî•"),
    },
    "thief": {
        "active": {
            "–¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä": "üî™ –¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä ‚Äì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω; -10% —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞ –Ω–∞ 2 —Ö–æ–¥–∞.",
            "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–Ω–æ–∫": "üî™‚ò†Ô∏è –û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–Ω–æ–∫ ‚Äì –Ø–¥ –∏ -–∑–∞—â–∏—Ç–∞ —Ü–µ–ª–∏.",
            "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ": "ü´• –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ ‚Äì –£–∫–ª–æ–Ω –∏ +10 HP.",
        },
        "passive": {
            "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å": "ü´• –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å ‚Äì –°—Ç–∞—Ä—Ç –≤ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏, +20% —É–∫–ª–æ–Ω–µ–Ω–∏—è.",
            "–ë—ã—Å—Ç—Ä–æ—Ç–∞ –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö": "‚ö° –ë—ã—Å—Ç—Ä–æ—Ç–∞ ‚Äì +10% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞.",
        },
        "start": ("–¢–µ–Ω–µ–≤–æ–π —É–¥–∞—Ä", "üî™"),
    },
    "acolyte": {
        "active": {
            "–°–≤—è—Ç–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ": "‚ú® –°–≤—è—Ç–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ ‚Äì –õ–µ—á–∏—Ç —Å–µ–±—è –Ω–∞ 30% HP.",
            "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ç–∞": "‚ú® –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ ‚Äì +15% –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ 2 —Ö–æ–¥–∞.",
            "–ù–µ–±–µ—Å–Ω–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ": "‚ú® –ù–µ–±–µ—Å–Ω–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ ‚Äì –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω —Å–≤–µ—Ç–æ–º.",
        },
        "passive": {
            "–í–µ—Ä–∞ –≤ —Å–≤–µ—Ç": "‚ú® –í–µ—Ä–∞ –≤ —Å–≤–µ—Ç ‚Äì +10% –∫ —Å–∏–ª–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è.",
            "–°–≤—è—â–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ": "‚ú® –°–≤—è—â–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ‚Äì -20% —É—Ä–æ–Ω–∞ –æ—Ç —Ç—å–º—ã.",
        },
        "start": ("–°–≤—è—Ç–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ", "‚ú®"),
    },
    "archer": {
        "active": {
            "–¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª": "üèπ –¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª ‚Äì –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–Ω.",
            "–°—Ç—Ä–µ–ª–∞ –æ–≥–Ω—è": "üèπüî• –°—Ç—Ä–µ–ª–∞ –æ–≥–Ω—è ‚Äì –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≥–æ—Ä–µ–Ω–∏–µ –Ω–∞ 2 —Ö–æ–¥–∞.",
            "–î–≤–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª": "üèπüèπ –î–≤–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª ‚Äì –î–≤–µ —Å—Ç—Ä–µ–ª—ã –ø–æ–¥—Ä—è–¥.",
        },
        "passive": {
            "–õ—ë–≥–∫–æ—Å—Ç—å –≤ –¥–≤–∏–∂–µ–Ω–∏–∏": "üèÉ –õ—ë–≥–∫–æ—Å—Ç—å ‚Äì +10% —É–∫–ª–æ–Ω–µ–Ω–∏—è.",
            "–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∏–Ω—Å—Ç–∏–Ω–∫—Ç": "üåø –ò–Ω—Å—Ç–∏–Ω–∫—Ç ‚Äì +10% –∫—Ä–∏—Ç–∞, –µ—Å–ª–∏ —Ö–æ–¥ –ø–µ—Ä–≤—ã–π.",
        },
        "start": ("–¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª", "üèπ"),
    },
    "merchant": {
        "active": {
            "–¢–æ—Ä–≥–æ–≤—ã–π —Ç—Ä—é–∫": "üíº –¢–æ—Ä–≥–æ–≤—ã–π —Ç—Ä—é–∫ ‚Äì –£—Ä–æ–Ω –∏ -10% –∑–∞—â–∏—Ç—ã –≤—Ä–∞–≥–∞ (1 —Ö–æ–¥).",
            "–£–¥–∞—Ä –∫—É–ø—Ü–∞": "üíºüî® –£–¥–∞—Ä –∫—É–ø—Ü–∞ ‚Äì –û–≥–ª—É—à–µ–Ω–∏–µ (1 —Ö–æ–¥).",
            "–°–¥–µ–ª–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏": "üíºüéØ –°–¥–µ–ª–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏ ‚Äì +15% –∫—Ä–∏—Ç–∞ (1 —Ö–æ–¥).",
        },
        "passive": {
            "–ë–ª–µ—Å—Ç—è—â–∏–π –æ—Ä–∞—Ç–æ—Ä": "üó£Ô∏è –ë–ª–µ—Å—Ç—è—â–∏–π –æ—Ä–∞—Ç–æ—Ä ‚Äì 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ.",
            "–¢–æ—Ä–≥–æ–≤—ã–π —É–º": "üß† –¢–æ—Ä–≥–æ–≤—ã–π —É–º ‚Äì +5% –∫ –∫—Ä–∏—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞.",
        },
        "start": ("–¢–æ—Ä–≥–æ–≤—ã–π —Ç—Ä—é–∫", "üíº"),
    },
}

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ (16 –æ—á–∫–æ–≤; 2..7)
def fallback_stats_for_class(class_key: str) -> Dict[str, int]:
    if class_key == "mage":
        base = {"str": 2, "dex": 3, "int": 7, "end": 4}
    elif class_key == "archer":
        base = {"str": 2, "dex": 7, "int": 3, "end": 4}
    elif class_key == "swordsman":
        base = {"str": 7, "dex": 3, "int": 2, "end": 4}
    elif class_key == "thief":
        base = {"str": 3, "dex": 7, "int": 3, "end": 3}
    elif class_key == "acolyte":
        base = {"str": 3, "dex": 3, "int": 5, "end": 5}
    else:  # merchant
        base = {"str": 3, "dex": 4, "int": 5, "end": 4}
    return base

async def gpt_stats_for_class(class_key: str) -> Dict[str, int]:
    if not USE_OPENAI or oai_client is None:
        return fallback_stats_for_class(class_key)
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.7,
            max_tokens=80,
            messages=[
                {"role": "system", "content": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ 16 –æ—á–∫–æ–≤ –º–µ–∂–¥—É STR, DEX, INT, END –ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∫–ª–∞—Å—Å–∞. –§–æ—Ä–º–∞—Ç: STR=x DEX=y INT=z END=w, —á–∏—Å–ª–∞ 2..7."},
                {"role": "user", "content": f"–ö–ª–∞—Å—Å: {class_key}"},
            ],
        )
        txt = resp.choices[0].message.content.strip()
        vals = fallback_stats_for_class(class_key)
        up = txt.replace(",", " ").replace(";", " ")
        for token in up.split():
            t = token.upper()
            if "STR" in t:
                num = "".join(ch for ch in t if ch.isdigit())
                if num: vals["str"] = int(num)
            elif "DEX" in t:
                num = "".join(ch for ch in t if ch.isdigit())
                if num: vals["dex"] = int(num)
            elif "INT" in t:
                num = "".join(ch for ch in t if ch.isdigit())
                if num: vals["int"] = int(num)
            elif "END" in t:
                num = "".join(ch for ch in t if ch.isdigit())
                if num: vals["end"] = int(num)
        for k in vals:
            vals[k] = max(2, min(7, int(vals[k])))
        return vals
    except Exception:
        return fallback_stats_for_class(class_key)

def starting_hp_for_class(class_key: str) -> int:
    if class_key in ("swordsman", "archer"):
        return 10
    if class_key in ("acolyte", "thief", "merchant"):
        return 8
    if class_key == "mage":
        return 6
    return 8

# –ü—Ä–æ–ª–æ–≥
async def gpt_prologue() -> str:
    if not USE_OPENAI or oai_client is None:
        return ("üìú <b>–ü—Ä–æ–ª–æ–≥ —Ç–≤–æ–µ–π —Å–∞–≥–∏</b>\n"
                "–í–µ–∫–∞–º–∏ –º–∏—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–ª –Ω–∞ –≥—Ä–∞–Ω–∏, –∏ –ª–∏—à—å —Ä–µ–¥–∫–∏–µ –≥–µ—Ä–æ–∏ —Ä–µ—à–∞–ª–∏—Å—å –≤—Å—Ç–∞—Ç—å –Ω–∞ –ø—É—Ç–∏ —Ç—å–º—ã.")
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.95,
            max_tokens=220,
            messages=[
                {"role": "system", "content": "–ù–∞–ø–∏—à–∏ —ç–ø–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–ª–æ–≥ (3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –¥–ª—è —Ñ—ç–Ω—Ç–µ–∑–∏-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –ë–µ–∑ Markdown."},
                {"role": "user", "content": "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ—Ä, –≥–µ—Ä–æ–π –æ–¥–∏–Ω."},
            ],
        )
        return "üìú <b>–ü—Ä–æ–ª–æ–≥ —Ç–≤–æ–µ–π —Å–∞–≥–∏</b>\n" + resp.choices[0].message.content.strip()
    except Exception:
        return ("üìú <b>–ü—Ä–æ–ª–æ–≥ —Ç–≤–æ–µ–π —Å–∞–≥–∏</b>\n"
                "–ò–∑ –≥–ª—É–±–∏–Ω –∑–∞–±—ã—Ç—ã—Ö –≤–µ–∫–æ–≤ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –¥—Ä–µ–≤–Ω—è—è —É–≥—Ä–æ–∑–∞. –ù–æ —Ç–∞–º, –≥–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Ç—å–º–∞, –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–≤–µ—Ç.")

_CITY_PRESET = [
    "–ó–ª–∞—Ç–æ–≤–µ—Ä—Å–∫", "–°–µ–¥–æ–ª–µ—Å—å–µ", "–õ—É–Ω–æ–ª–µ—Å—å–µ", "–ì–æ—Ä–µ–≤—Å–∫",
    "–ü—Ä–æ–Ω—Ç–µ—Ä–∞", "–≠–π–Ω–±—Ä–æ—Ö", "–°—É–º–µ—Ä–µ—á–Ω—ã–π –ü–µ—Ä–µ–≤–∞–ª", "–ö—Ä–æ–≤–∞–≤—ã–π –£—Ç—ë—Å",
    "–ù–æ—á–Ω–æ–π –ö–∞—Ä—Å—Ç", "–¢—É–º–∞–Ω–Ω–∞—è –ì–∞–≤–∞–Ω—å", "–ß–µ—Ä–Ω–æ—Ä–µ—á—å–µ", "–°—Ç–∞—Ä–∞—è –¢—å–º–∞",
]

async def gpt_city_name() -> str:
    if not USE_OPENAI or oai_client is None:
        return random.choice(_CITY_PRESET)
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=20,
            messages=[
                {"role": "system", "content": "–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—ç–Ω—Ç–µ–∑–∏-–≥–æ—Ä–æ–¥–∫–∞ (1‚Äì2 —Å–ª–æ–≤–∞), –º–æ–∂–Ω–æ —Å —Ç—Ä–∞–Ω—Å–∏–ª—å–≤–∞–Ω—Å–∫–∏–º –æ—Ç—Ç–µ–Ω–∫–æ–º. –¢–æ–ª—å–∫–æ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."},
                {"role": "user", "content": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫."},
            ],
        )
        name = resp.choices[0].message.content.strip().splitlines()[0]
        return name[:24]
    except Exception:
        return random.choice(_CITY_PRESET)

async def gpt_arrival_text(city_name: str, hero_name: str, gender: str) -> str:
    if not USE_OPENAI or oai_client is None:
        return (f"üèòÔ∏è <b>{city_name}</b>\n"
                f"{hero_name} –ø—Ä–∏–±—ã–≤–∞–µ—Ç –≤ –≥–æ—Ä–æ–¥: —à—É–º —Ä—ã–Ω–∫–æ–≤, –ø–∞—Ö–Ω–µ—Ç —Ö–ª–µ–±–æ–º –∏ —Å–º–æ–ª–æ–π. –í–ø–µ—Ä–µ–¥–∏ ‚Äî –ø—É—Ç–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—É, –Ω–∞ —Ä—ã–Ω–æ–∫ –∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è.")
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=220,
            messages=[
                {"role": "system", "content": "–û–ø–∏—à–∏ 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –û–î–ù–û–ì–û –≥–µ—Ä–æ—è –≤ –≥–æ—Ä–æ–¥: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ª—é–¥–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –¢–æ–ª—å–∫–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ."},
                {"role": "user", "content": f"–ì–æ—Ä–æ–¥: {city_name}. –ì–µ—Ä–æ–π: {hero_name} ({'–º' if gender=='male' else '–∂'})."},
            ],
        )
        return f"üèòÔ∏è <b>{city_name}</b>\n" + resp.choices[0].message.content.strip()
    except Exception:
        return (f"üèòÔ∏è <b>{city_name}</b>\n"
                f"{hero_name} –≤—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –¥—Ä–µ–≤–Ω–∏–µ –≤–æ—Ä–æ—Ç–∞. –ì–æ—Ä–æ–¥ –ø–æ–ª–æ–Ω —Å–ª—É—Ö–æ–≤ –∏ –æ–∂–∏–¥–∞–Ω–∏–π –≥—Ä—è–¥—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω.")

# ---------- –°—Ç–∞—Ä—Ç / –ì–µ–Ω–¥–µ—Ä ----------

@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö—Ç–æ —Ç—ã?", reply_markup=gender_kb())

@router.callback_query(F.data.regexp(r"^gender_(male|female)$"))
async def pick_gender(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    gender = "male" if cb.data.endswith("male") else "female"
    await state.update_data(gender=gender)
    await state.set_state(CreateFlow.ask_name)
    await cb.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# ---------- –ò–º—è ----------

@router.message(CreateFlow.ask_name, F.text)
async def handle_name(message: types.Message, state: FSMContext):
    name_raw = message.text.strip()
    bad = any(x in name_raw.lower() for x in ["—Ö—É–π", "–ø–∏–∑–¥", "—Å—É–∫–∞", "–±–ª—è", "fuck"])
    if bad or len(name_raw) < 2 or len(name_raw) > 20:
        await message.answer("–ò–º—è –Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ, 2‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –≤—É–ª—å–≥–∞—Ä—â–∏–Ω—ã.")
        return
    await state.update_data(name=name_raw)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=classes_kb())

# ---------- –ö–ª–∞—Å—Å / –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ----------

@router.callback_query(F.data.regexp(r"^class_pick_(\w+)$"))
async def pick_class(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    class_key = cb.data.split("_")[-1]
    if class_key not in CLASS_LABELS:
        await cb.message.answer("–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç.")
        return

    stats = await gpt_stats_for_class(class_key)
    label = CLASS_LABELS[class_key]
    desc = CLASS_DESCRIPTIONS[class_key]
    abil = CLASS_ABILITIES[class_key]
    start_name, start_emoji = abil["start"]

    act_lines = [f"‚Ä¢ {v}" for v in abil["active"].values()]
    pas_lines = [f"‚Ä¢ {v}" for v in abil["passive"].values()]

    text = (
        f"{label}\n{desc}\n\n"
        f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
        f"üí™ –°–∏–ª–∞: {stats['str']}\n"
        f"üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['dex']}\n"
        f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['int']}\n"
        f"ü´Ä –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats['end']}\n\n"
        f"<b>–£–º–µ–Ω–∏—è</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b>\n" + "\n".join(act_lines) + "\n\n"
        f"<b>–ü–∞—Å—Å–∏–≤–Ω—ã–µ:</b>\n" + "\n".join(pas_lines) + "\n\n"
        f"<b>–í –Ω–∞—á–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–º–µ–Ω–∏–µ:</b> {start_emoji} {start_name}"
    )
    await state.update_data(class_key=class_key, class_label=label, stats=stats)
    await cb.message.answer(text, reply_markup=confirm_kb())

@router.callback_query(F.data == "cancel_class")
async def cancel_class(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=classes_kb())

@router.callback_query(F.data == "confirm_class")
async def confirm_class(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    name = data.get("name", "–ì–µ—Ä–æ–π")
    gender = data.get("gender", "male")
    class_key = data.get("class_key")
    class_label = data.get("class_label")
    stats = data.get("stats") or fallback_stats_for_class(class_key or "swordsman")
    if not class_key:
        await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å.")
        return

    p = get_player(cb.from_user.id) or Player(user_id=cb.from_user.id)

    p.user_id = cb.from_user.id
    p.gender = gender
    p.name = name
    p.class_key = class_key
    p.class_label = class_label

    p.level = 1
    p.exp = 0
    p.gold = 50
    p.inventory = {}
    p.equipment = {"weapon": None, "armor": None}

    p.strength = stats["str"]
    p.dexterity = stats["dex"]
    p.intellect = stats["int"]
    p.endurance = stats["end"]

    p.max_hp = starting_hp_for_class(class_key)
    p.hp = p.max_hp

    abil = CLASS_ABILITIES[class_key]
    start_name, start_emoji = abil["start"]
    p.abilities_known = {start_name: 1}
    p.ability_meta = {start_name: {"emoji": start_emoji, "title": start_name, "type": "active"}}
    p.ability_charges = {start_name: 3}

    prologue = await gpt_prologue()
    city = await gpt_city_name()
    p.city_name = city
    p.world_story = prologue

    save_player(p)

    await cb.message.answer(prologue)
    await cb.message.answer(f"üåü –ù–∞—á–∞–ª—å–Ω–æ–µ —É–º–µ–Ω–∏–µ: {start_emoji} {start_name} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–Ω–∏–≥—É —É–º–µ–Ω–∏–π.")
    arrive = await gpt_arrival_text(city, name, gender)
    await cb.message.answer(arrive)
    await cb.message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?", reply_markup=city_menu_kb())

    await state.clear()
