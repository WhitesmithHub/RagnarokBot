# -*- coding: utf-8 -*-
# app/features/market.py
from __future__ import annotations

import random
from typing import Dict, List, Optional, Tuple

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.core.storage import get_player, save_player
from app.core.emoji import decorate_item_name

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –≤—ã–±–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: user_id -> [(name, price), ...]
_SALE_CACHE: Dict[int, List[Tuple[str, int]]] = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ ----------

def _base_pool() -> List[Dict]:
    return [
        # consumables / camp
        {"name": "–ü—Ä–æ–≤–∏–∞–Ω—Ç", "kind": "consumable", "price": 8,  "desc": "–ü—Ä–æ—Å—Ç–æ–π –¥–æ—Ä–æ–∂–Ω—ã–π –ø–∞—ë–∫.", "max_stack": 3},
        {"name": "–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", "kind": "camp", "price": 15, "desc": "–î–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞–ª–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.", "max_stack": 3},

        # weapons
        {"name": "–ü—Ä–æ—Å—Ç–∞—è —Å–∞–±–ª—è", "kind": "weapon", "price": 25, "desc": "–õ—ë–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫.", "dmg":"+1"},
        {"name": "–ö–∏–Ω–∂–∞–ª", "kind": "weapon", "price": 18, "desc": "–£–¥–æ–±–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —É–¥–∞—Ä–æ–≤.", "dmg":"+1"},
        {"name": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö", "kind": "weapon", "price": 20, "desc": "–ü—Ä–æ—Å—Ç–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å.", "material": "robe", "dmg":"+1"},
        {"name": "–õ—É–∫ –æ—Ö–æ—Ç–Ω–∏–∫–∞", "kind": "weapon", "price": 28, "desc": "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ –∏ —Ç–µ—Ç–∏–≤–∞.", "dmg":"+1"},
        {"name": "–ë—É–ª–∞–≤–∞ –ø–æ—Å–ª—É—à–Ω–∏–∫–∞", "kind": "weapon", "price": 23, "desc": "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Å–ª—É—à–Ω–∏–∫–æ–≤.", "dmg":"+1"},

        # armors
        {"name": "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "kind": "armor", "price": 22, "desc": "–õ—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞.", "def":"+1", "material": "leather"},
        {"name": "–†–æ–±–∞ —É—á–µ–Ω–∏–∫–∞", "kind": "armor", "price": 19, "desc": "–¢–∫–∞–Ω—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ä—É–Ω–∞–º–∏.", "def":"+1", "material": "robe"},
    ]

def _roll_shop_items() -> List[Dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–∏–∞–Ω—Ç–∞ –∏ –∫–æ—Å—Ç—Ä–∞.
    –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —É –∏–≥—Ä–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è.
    """
    pool = _base_pool()
    must = [next(x for x in pool if x["name"] == "–ü—Ä–æ–≤–∏–∞–Ω—Ç"),
            next(x for x in pool if x["name"] == "–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞")]
    rest = [x for x in pool if x["name"] not in ("–ü—Ä–æ–≤–∏–∞–Ω—Ç", "–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞")]
    random.shuffle(rest)
    items = must + rest[:3]
    return items

def format_item_line(entry: Dict, index: Optional[int] = None) -> str:
    """–§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ ‚Äî –±–µ–∑ —Å–ª–æ–≤ ¬´–°—Ç–∞–∫–∞–µ—Ç—Å—è¬ª."""
    name = entry["name"]
    price = entry["price"]
    desc = entry.get("desc", "")
    kind = entry.get("kind")
    material = entry.get("material")
    title = decorate_item_name(name, kind, material)

    max_part = f" (MAX: {entry['max_stack']})" if entry.get("max_stack") else ""
    head = f"{index}. {title} ‚Äî {price} –∑–æ–ª.{max_part}" if index else f"{title} ‚Äî {price} –∑–æ–ª.{max_part}"

    extra = []
    if "dmg" in entry:
        extra.append(f"–£—Ä–æ–Ω: {entry['dmg']}")
    if "def" in entry:
        extra.append(f"–ó–∞—â–∏—Ç–∞: {entry['def']}")
    stats_line = ("\n" + "\n".join(extra)) if extra else ""

    body = desc.strip() if desc else ""
    return f"{head}\n{body}{stats_line}".strip()

def _market_menu_kb() -> InlineKeyboardMarkup:
    # –£–±—Ä–∞–ª–∏ ¬´üèòÔ∏è –í –≥–æ—Ä–æ–¥¬ª
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ö—É–ø–∏—Ç—å", callback_data="m_buy"),
         InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="m_sell")],
    ])

def _buy_pick_kb(count: int) -> InlineKeyboardMarkup:
    nums, rows = [], []
    for i in range(1, count+1):
        nums.append(InlineKeyboardButton(text=str(i), callback_data=f"m_b_{i}"))
        if len(nums) == 5:
            rows.append(nums); nums = []
    if nums:
        rows.append(nums)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _confirm_kb(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"m_conf_{idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="m_back")],
    ])

def _sell_pick_kb(n: int) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i in range(1, n+1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"m_s_{i}"))
        if len(row) == 5:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π ----------

def clear_market_for_player(user_id: int):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç."""
    p = get_player(user_id)
    if hasattr(p, "shop_items"):
        delattr(p, "shop_items")
    save_player(p)

# ---------- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä—ã–Ω–∫–∞ ----------

@router.message(F.text.in_(["üõí –†—ã–Ω–æ–∫", "–†—ã–Ω–æ–∫"]))
async def open_market(message: types.Message):
    p = get_player(message.from_user.id)
    shop = getattr(p, "shop_items", None)
    if not shop:
        shop = _roll_shop_items()
        p.shop_items = shop
        save_player(p)

    lines = ["üõí <b>–†—ã–Ω–æ–∫</b>", "üë®‚Äçü¶± –¢–æ—Ä–≥–æ–≤–µ—Ü: ¬´–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ?¬ª", f"üëõ –ö–æ—à–µ–ª—ë–∫: {p.gold}"]
    for i, it in enumerate(shop, start=1):
        lines.append(format_item_line(it, i))
    lines.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")
    await message.answer("\n\n".join(lines), reply_markup=_market_menu_kb())

# ---------- –ü–æ–∫—É–ø–∫–∞ ----------

@router.callback_query(F.data == "m_buy")
async def market_buy_menu(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    if not shop:
        await cb.message.answer("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—É—Å—Ç. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=_market_menu_kb())
        return
    await cb.message.answer("üë®‚Äçü¶± –¢–æ—Ä–≥–æ–≤–µ—Ü: ¬´–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä.¬ª", reply_markup=_buy_pick_kb(min(9, len(shop))))

@router.callback_query(F.data.regexp(r"^m_b_(\d+)$"))
async def market_buy_pick(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return
    item = shop[idx]
    text = format_item_line(item, idx+1)
    await cb.message.answer(text, reply_markup=_confirm_kb(idx+1))

@router.callback_query(F.data.regexp(r"^m_conf_(\d+)$"))
async def market_buy_confirm(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop: List[Dict] = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return

    item = shop[idx]
    name, price = item["name"], int(item["price"])
    max_stack = item.get("max_stack")

    if p.gold < price:
        await cb.message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞."); return

    if max_stack:
        cur = p.inventory.get(name, 0)
        if cur >= max_stack:
            await cb.message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."); return

    if name not in p.inventory and len(p.inventory) >= 10:
        await cb.message.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω (10 —Å–ª–æ—Ç–æ–≤). –ü—Ä–æ–¥–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å."); return

    p.gold -= price
    p.inventory[name] = p.inventory.get(name, 0) + 1
    save_player(p)

    await cb.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    await open_market(cb.message)

@router.callback_query(F.data == "m_back")
async def market_back(cb: types.CallbackQuery):
    await cb.answer()
    await open_market(cb.message)

# ---------- –ü—Ä–æ–¥–∞–∂–∞ ----------

@router.callback_query(F.data == "m_sell")
async def market_sell_menu(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)

    sale_list = [(name, cnt) for name, cnt in p.inventory.items()]
    if not sale_list:
        await cb.message.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", reply_markup=_market_menu_kb()); return

    lines = ["üí∞ <b>–ü—Ä–æ–¥–∞–∂–∞</b>", "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ 1 —à—Ç. –∑–∞ 50% —Ü–µ–Ω—ã:"]
    numbered: List[Tuple[str,int]] = []
    for i, (name, cnt) in enumerate(sale_list, start=1):
        base = next((it for it in getattr(p, "shop_items", []) if it["name"] == name), None)
        if base is None:
            base = next((it for it in _base_pool() if it["name"] == name), None)
        sell_price = max(1, int((base["price"] if base else 8) * 0.5))

        kind = "weapon" if any(x in name.lower() for x in ["–º–µ—á","—Å–∞–±–ª","–∫–∏–Ω–∂–∞–ª","–ª—É–∫","–ø–æ—Å–æ—Ö","–±—É–ª–∞–≤","–∂–µ–∑–ª","—Ç–æ–ø–æ—Ä","–º–æ–ª–æ—Ç"]) else (
               "armor" if any(x in name.lower() for x in ["–±—Ä–æ–Ω","–ª–∞—Ç—ã","–∫–æ–ª—å—á—É–≥","–ø–∞–Ω—Ü–∏—Ä","—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç","–∫–æ–∂–∞–Ω"]) else "consumable")
        material = "leather" if "–∫–æ–∂–∞–Ω" in name.lower() else ("robe" if any(x in name.lower() for x in ["—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç"]) else None)
        titled = decorate_item_name(name, kind, material)
        lines.append(f"{i}. {titled} ‚Äî {sell_price} –∑–æ–ª. (√ó{cnt})")
        numbered.append((name, sell_price))

    _SALE_CACHE[user_id] = numbered
    await cb.message.answer("\n".join(lines), reply_markup=_sell_pick_kb(len(numbered)))

@router.callback_query(F.data.regexp(r"^m_s_(\d+)$"))
async def market_sell_pick(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    sale = _SALE_CACHE.get(user_id, [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(sale)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.", reply_markup=_market_menu_kb()); return
    name, price = sale[idx]
    if p.inventory.get(name, 0) <= 0:
        await cb.message.answer("–≠—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç.", reply_markup=_market_menu_kb()); return

    p.inventory[name] -= 1
    if p.inventory[name] <= 0:
        del p.inventory[name]
    p.gold += price
    save_player(p)

    await cb.message.answer(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {name} –∑–∞ {price} –∑–æ–ª. üëõ –ò—Ç–æ–≥–æ: {p.gold}")
    await open_market(cb.message)

from aiogram.filters import Command
from app.core.items_lore_repo import get_all_lore_items
from app.core.emoji import rarity_badge

@router.message(Command("lore_preview"))
async def lore_preview(message: types.Message):
    items = get_all_lore_items()
    if not items:
        await message.answer("–õ–æ—Ä–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç (app/data/items_lore.txt).")
        return

    head = items[:10]
    lines = []
    for it in head:
        lvl = f"{it.level[0]}‚Äì{it.level[1]}"
        lines.append(
            f"‚Ä¢ {it.name} [{rarity_badge(it.rarity)}] ({lvl})\n"
            f"  {it.type}; –∫–ª–∞—Å—Å—ã: {', '.join(it.allowed_classes)}\n"
            f"  {it.description}"
        )
    await message.answer(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}\n\n" + "\n\n".join(lines))
