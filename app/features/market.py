# -*- coding: utf-8 -*-
# app/features/market.py
from __future__ import annotations

import random
from typing import Dict, List, Optional, Tuple

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.core.storage import get_player, save_player
from app.core.campaign_items import pick_campaign_items, find_campaign_item_by_name
from app.core.items_lore_repo import sample_random_items

# –≠–º–æ–¥–∑–∏/–±–µ–π–¥–∂–∏ ‚Äî –º—è–≥–∫–∏–µ —Ñ–æ–ª–±—ç–∫–∏
try:
    from app.core.emoji import decorate_item_name, rarity_badge
except Exception:
    def decorate_item_name(name: str, kind: Optional[str] = None, material: Optional[str] = None) -> str:
        return name
    def rarity_badge(r: str) -> str:
        return r or ""

router = Router(name="market")
_SALE_CACHE: Dict[int, List[Tuple[str, int]]] = {}

# ---------- –ë–ê–ó–û–í–´–ï –í–°–ï–ì–î–ê –î–û–°–¢–£–ü–ù–´–ï ----------
def _base_pool() -> List[Dict]:
    return [
        {"name": "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "kind": "consumable", "price": 8,  "desc": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è.", "max_stack": 3},
        {"name": "–ü–æ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä",  "kind": "camp",       "price": 15, "desc": "–ù–∞–±–æ—Ä –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≤ –¥–æ—Ä–æ–≥–µ.",      "max_stack": 3},
    ]

# –ò–Ω—Ñ–µ—Ä–µ–Ω—Å ¬´–∫—Ç–æ –º–æ–∂–µ—Ç –Ω–æ—Å–∏—Ç—å¬ª, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è
def _infer_who(entry: Dict) -> Optional[str]:
    if entry.get("who"):
        return entry["who"]
    name = (entry.get("name") or "").lower()
    kind = entry.get("kind")
    material = entry.get("material")

    if kind == "weapon":
        if "–ª—É–∫" in name:               return "–ª—É—á–Ω–∏–∫; –æ—Ö–æ—Ç–Ω–∏–∫"
        if any(w in name for w in ("–º–µ—á","–∫–ª–∏–Ω–æ–∫")):   return "–º–µ—á–Ω–∏–∫; —Ä—ã—Ü–∞—Ä—å; –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å–µ—Ü"
        if any(w in name for w in ("–∫–∏–Ω–∂–∞–ª","–∫–∞—Ç–∞—Ä")): return "–∞—Å—Å–∞—Å–∏–Ω; —Ä–∞–∑–±–æ–π–Ω–∏–∫"
        if any(w in name for w in ("–ø–æ—Å–æ—Ö","–∂–µ–∑–ª")):   return "–º–∞–≥; –≤–æ–ª—à–µ–±–Ω–∏–∫; –º—É–¥—Ä–µ—Ü"
        if any(w in name for w in ("–±—É–ª–∞–≤–∞","–º–æ–ª–æ—Ç")): return "–ø–æ—Å–ª—É—à–Ω–∏–∫; –∂—Ä–µ—Ü; –º–æ–Ω–∞—Ö"
        if "—Ç–æ–ø–æ—Ä" in name:             return "–º–µ—á–Ω–∏–∫; –∫—É–∑–Ω–µ—Ü; –∞–ª—Ö–∏–º–∏–∫"
        if any(w in name for w in ("–∫–æ–ø—å","–ø–∏–∫–∞")):    return "—Ä—ã—Ü–∞—Ä—å; –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å–µ—Ü; –º–µ—á–Ω–∏–∫"
        if "–∫–∞—Å—Ç–µ—Ç" in name:            return "–º–æ–Ω–∞—Ö"
    if kind == "armor":
        if material == "robe":          return "–º–∞–≥; –∂—Ä–µ—Ü; –º–æ–Ω–∞—Ö; –≤–æ–ª—à–µ–±–Ω–∏–∫"
        if material == "leather":       return "–≤–æ—Ä; –ª—É—á–Ω–∏–∫; —Ç–æ—Ä–≥–æ–≤–µ—Ü"
        if material == "heavy":         return "–º–µ—á–Ω–∏–∫; —Ä—ã—Ü–∞—Ä—å; –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å–µ—Ü"
    return None

# ---------- –°–ë–û–†–ö–ê –í–ò–¢–†–ò–ù–´ ----------
def _roll_shop_items_for_player(p) -> List[Dict]:
    must = _base_pool()
    items: List[Dict] = must.copy()
    rest_slots = 5 - len(items)

    camp_id: Optional[str] = getattr(p, "campaign_id", None)
    class_key: Optional[str] = getattr(p, "class_key", None)

    # –¥–æ 2 ‚Äî –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
    k_camp = min(2, rest_slots)
    camp_items = pick_campaign_items(camp_id, k=k_camp, class_key=class_key)
    items += camp_items
    rest_slots -= len(camp_items)

    # –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏–∑ –ª–æ—Ä–∞
    if rest_slots > 0:
        exclude = {it["name"] for it in items}
        lore_items = sample_random_items(rest_slots, class_key=class_key, exclude_names=exclude)
        if lore_items:
            items += lore_items

    random.shuffle(items)
    return items

def _market_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="m_buy"),
         InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="m_sell")],
    ])

def _buy_pick_kb(count: int) -> InlineKeyboardMarkup:
    nums, rows = [], []
    for i in range(1, count + 1):
        nums.append(InlineKeyboardButton(text=str(i), callback_data=f"m_b_{i}"))
        if len(nums) == 5:
            rows.append(nums); nums = []
    if nums:
        rows.append(nums)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _confirm_kb(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"m_conf_{idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")],
    ])

def _sell_pick_kb(n: int) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i in range(1, n + 1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"m_s_{i}"))
        if len(row) == 5:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def format_item_line(entry: Dict, index: Optional[int] = None) -> str:
    name = entry["name"]; price = int(entry["price"])
    desc = entry.get("desc", "")
    kind = entry.get("kind"); material = entry.get("material")
    title = decorate_item_name(name, kind, material)
    max_part = f" (MAX: {entry['max_stack']})" if entry.get("max_stack") else ""
    head = f"{index}. {title} ‚Äî {price} –∑–æ–ª.{max_part}" if index else f"{title} ‚Äî {price} –∑–æ–ª.{max_part}"

    meta = []
    if entry.get("rarity"): meta.append(f"üè∑ {rarity_badge(entry['rarity'])}")
    if entry.get("level"):  meta.append(f"üìà –£—Ä–æ–≤–µ–Ω—å: {entry['level']}")

    if "dmg" in entry:   meta.append(f"‚öî –£—Ä–æ–Ω: {entry['dmg']}")
    if "def" in entry:   meta.append(f"üõ° –ó–∞—â–∏—Ç–∞: {entry['def']}")
    if entry.get("bonus"): meta.append(f"‚ú® –ë–æ–Ω—É—Å: {entry['bonus']}")

    who = _infer_who(entry)
    if who:
        meta.append(f"üë§ –ö—Ç–æ –º–æ–∂–µ—Ç –Ω–æ—Å–∏—Ç—å: {who}")

    meta_line = ("\n" + "\n".join(meta)) if meta else ""
    body = desc.strip() if desc else ""
    return f"{head}\n{body}{meta_line}".strip()

# ---------- –í–•–û–î –í –†–´–ù–û–ö ----------
@router.message(F.text.contains("–†—ã–Ω–æ–∫"))
async def open_market(message: types.Message):
    p = get_player(message.from_user.id)

    shop = getattr(p, "shop_items", None)
    if not shop or getattr(p, "shop_dirty", False):
        shop = _roll_shop_items_for_player(p)
        p.shop_items = shop
        p.shop_dirty = False
        save_player(p)

    lines = ["üõí <b>–†—ã–Ω–æ–∫</b>", "–ß—Ç–æ –∂–µ–ª–∞–µ—à—å –∫—É–ø–∏—Ç—å?", f"–ú–æ–Ω–µ—Ç—ã: {p.gold}"]
    for i, it in enumerate(shop, start=1):
        lines.append(format_item_line(it, i))
    lines.append("\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await message.answer("\n\n".join(lines), reply_markup=_market_menu_kb())

# ---------- –ü–û–ö–£–ü–ö–ê ----------
@router.callback_query(F.data == "m_buy")
async def market_buy_menu(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    if not shop:
        await cb.message.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–π–¥–∏ –ø–æ–∑–∂–µ.", reply_markup=_market_menu_kb()); return
    await cb.message.answer("–ß—Ç–æ –±–µ—Ä—ë—à—å? –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:", reply_markup=_buy_pick_kb(min(9, len(shop))))

@router.callback_query(F.data.regexp(r"^m_b_(\d+)$"))
async def market_buy_pick(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return
    item = shop[idx]
    text = format_item_line(item, idx + 1)
    await cb.message.answer(text, reply_markup=_confirm_kb(idx + 1))

@router.callback_query(F.data.regexp(r"^m_conf_(\d+)$"))
async def market_buy_confirm(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop: List[Dict] = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return

    item = shop[idx]
    name, price = item["name"], int(item["price"])
    max_stack = item.get("max_stack")

    if p.gold < price:
        await cb.message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç."); return
    if max_stack and p.inventory.get(name, 0) >= max_stack:
        await cb.message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."); return
    if name not in p.inventory and len(p.inventory) >= 10:
        await cb.message.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω (10 —Å–ª–æ—Ç–æ–≤). –û—Å–≤–æ–±–æ–¥–∏ –º–µ—Å—Ç–æ."); return

    p.gold -= price
    p.inventory[name] = p.inventory.get(name, 0) + 1
    save_player(p)

    await cb.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
    await open_market(cb.message)

@router.callback_query(F.data == "m_back")
async def market_back(cb: types.CallbackQuery):
    await cb.answer()
    await open_market(cb.message)

# ---------- –ü–†–û–î–ê–ñ–ê ----------
def _lookup_price_for_sell(p, name: str) -> int:
    shop = getattr(p, "shop_items", []) or []
    base = next((it for it in shop if it.get("name") == name), None)
    if base is not None:
        return int(base.get("price", 8))
    camp = find_campaign_item_by_name(name)
    if camp is not None:
        return int(camp.get("price", 8))
    return 8

@router.callback_query(F.data == "m_sell")
async def market_sell_menu(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)

    sale_list = [(name, cnt) for name, cnt in p.inventory.items()]
    if not sale_list:
        await cb.message.answer("–ü—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.", reply_markup=_market_menu_kb()); return

    lines = ["üí∞ <b>–°–∫—É–ø–∫–∞</b>", "–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ 1 —à—Ç. (50% –æ—Ç –±–∞–∑–æ–≤–æ–π):"]
    numbered: List[Tuple[str, int]] = []

    for i, (name, cnt) in enumerate(sale_list, start=1):
        base_price = _lookup_price_for_sell(p, name)
        sell_price = max(1, int(base_price * 0.5))
        lines.append(f"{i}. {name} ‚Äî {sell_price} –∑–æ–ª. (–≤ —Å—É–º–∫–µ: {cnt})")
        numbered.append((name, sell_price))

    _SALE_CACHE[user_id] = numbered
    await cb.message.answer("\n".join(lines), reply_markup=_sell_pick_kb(len(numbered)))

@router.callback_query(F.data.regexp(r"^m_s_(\d+)$"))
async def market_sell_pick(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    sale = _SALE_CACHE.get(user_id, [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(sale)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.", reply_markup=_market_menu_kb()); return

    name, price = sale[idx]
    if p.inventory.get(name, 0) <= 0:
        await cb.message.answer("–≠—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç.", reply_markup=_market_menu_kb()); return

    p.inventory[name] -= 1
    if p.inventory[name] <= 0:
        del p.inventory[name]
    p.gold += price
    save_player(p)

    await cb.message.answer(f"–ü—Ä–æ–¥–∞–Ω–æ: {name} –∑–∞ {price} –∑–æ–ª. –ë–∞–ª–∞–Ω—Å: {p.gold}")
