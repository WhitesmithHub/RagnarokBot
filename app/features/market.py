# -*- coding: utf-8 -*-
# app/features/market.py
from __future__ import annotations

import random
from typing import Dict, List, Optional, Tuple

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.core.storage import get_player, save_player

# –≠–º–æ–¥–∑–∏-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä ‚Äî –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
try:
    from app.core.emoji import decorate_item_name
except Exception:
    def decorate_item_name(name: str, kind: Optional[str] = None, material: Optional[str] = None) -> str:
        return name

# –ö–∞–º–ø–∞–Ω–∏–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
from app.core.campaign_items import pick_campaign_items, find_campaign_item_by_name

router = Router(name="market")

# user_id -> [(name, price)]
_SALE_CACHE: Dict[int, List[Tuple[str, int]]] = {}


# ---------- –ë–ê–ó–û–í–´–ô –ü–£–õ –†–´–ù–ö–ê (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π) ----------
def _base_pool() -> List[Dict]:
    return [
        # —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ / –ª–∞–≥–µ—Ä—å
        {"name": "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "kind": "consumable", "price": 8,  "desc": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è.", "max_stack": 3},
        {"name": "–ü–æ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä",  "kind": "camp",       "price": 15, "desc": "–ù–∞–±–æ—Ä –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≤ –¥–æ—Ä–æ–≥–µ.",      "max_stack": 3},

        # –æ—Ä—É–∂–∏–µ
        {"name": "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á",   "kind": "weapon", "price": 25, "desc": "–ü—Ä–æ—Å—Ç–æ–π, –Ω–æ –Ω–∞–¥—ë–∂–Ω—ã–π –∫–ª–∏–Ω–æ–∫.", "dmg": "+1"},
        {"name": "–î—É–±–∏–Ω–∫–∞",        "kind": "weapon", "price": 18, "desc": "–¢—è–∂—ë–ª–∞—è —Ä—É–∫–æ—è—Ç—å –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è.", "dmg": "+1"},
        {"name": "–ü–æ—Å–æ—Ö —É—á–µ–Ω–∏–∫–∞",  "kind": "weapon", "price": 20, "desc": "–õ—ë–≥–∫–∏–π –ø–æ—Å–æ—Ö –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –º–∞–≥–æ–≤.", "material": "robe", "dmg": "+1"},
        {"name": "–ö–∏–Ω–∂–∞–ª",         "kind": "weapon", "price": 23, "desc": "–õ—ë–≥–∫–æ–µ —Å–∫—Ä—ã—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ.", "dmg": "+1"},
        {"name": "–ö–æ—Ä–æ—Ç–∫–∏–π –ª—É–∫",   "kind": "weapon", "price": 28, "desc": "–£–¥–æ–±–µ–Ω –¥–ª—è –æ—Ö–æ—Ç—ã –∏ —Ä–∞–∑–≤–µ–¥–∫–∏.", "dmg": "+1"},

        # –±—Ä–æ–Ω—è
        {"name": "–ö–æ–∂–∞–Ω–∞—è –∫—É—Ä—Ç–∫–∞", "kind": "armor",  "price": 22, "desc": "–ì–∏–±–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏–∑ –≤—ã–¥–µ–ª–∞–Ω–Ω–æ–π –∫–æ–∂–∏.", "def": "+1", "material": "leather"},
        {"name": "–¢–∫–∞–Ω–∞—è –º–∞–Ω—Ç–∏—è",  "kind": "armor",  "price": 19, "desc": "–õ—ë–≥–∫–∞—è –º–∞–Ω—Ç–∏—è –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π.", "def": "+1", "material": "robe"},
    ]


# ---------- –°–ë–û–†–ö–ê –í–ò–¢–†–ò–ù–´ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ò–ì–†–û–ö–ê ----------
def _roll_shop_items_for_player(p) -> List[Dict]:
    """
    5 –ø–æ–∑–∏—Ü–∏–π: 2 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–∑–µ–ª—å–µ + –ø–æ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä) + 3 –º–µ—Å—Ç–∞,
    –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ 2 –∫–∞–º–ø–∞–Ω–∏–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞.
    """
    pool = _base_pool()
    must = [
        next(x for x in pool if x["name"] == "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"),
        next(x for x in pool if x["name"] == "–ü–æ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä"),
    ]
    rest = [x for x in pool if x["name"] not in ("–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–ü–æ–ª–µ–≤–æ–π –Ω–∞–±–æ—Ä")]
    random.shuffle(rest)

    items: List[Dict] = must.copy()
    rest_slots = 3

    # –ö–∞–º–ø–∞–Ω–∏—è –∏ –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
    camp_id: Optional[str] = getattr(p, "campaign_id", None)
    class_key: Optional[str] = getattr(p, "class_key", None)

    # –¥–æ 2 —à—Ç –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
    camp_items = pick_campaign_items(camp_id, k=min(2, rest_slots), class_key=class_key)
    items += camp_items
    rest_slots -= len(camp_items)

    # –¥–æ–±–∏–≤–∞–µ–º –±–∞–∑–æ–π
    if rest_slots > 0:
        items += rest[:rest_slots]

    # –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∞–µ–º, —á—Ç–æ–±—ã ¬´–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ¬ª –Ω–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
    random.shuffle(items)
    return items


def _market_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="m_buy"),
         InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="m_sell")],
    ])


def _buy_pick_kb(count: int) -> InlineKeyboardMarkup:
    nums, rows = [], []
    for i in range(1, count + 1):
        nums.append(InlineKeyboardButton(text=str(i), callback_data=f"m_b_{i}"))
        if len(nums) == 5:
            rows.append(nums); nums = []
    if nums:
        rows.append(nums)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _confirm_kb(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"m_conf_{idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")],
    ])


def _sell_pick_kb(n: int) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i in range(1, n + 1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"m_s_{i}"))
        if len(row) == 5:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä—ã–Ω–∫—É", callback_data="m_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def format_item_line(entry: Dict, index: Optional[int] = None) -> str:
    name = entry["name"]; price = entry["price"]
    desc = entry.get("desc", ""); kind = entry.get("kind"); material = entry.get("material")
    title = decorate_item_name(name, kind, material)
    max_part = f" (MAX: {entry['max_stack']})" if entry.get("max_stack") else ""
    head = f"{index}. {title} ‚Äî {price} –∑–æ–ª.{max_part}" if index else f"{title} ‚Äî {price} –∑–æ–ª.{max_part}"

    extra = []
    if "dmg" in entry: extra.append(f"‚öî –£—Ä–æ–Ω: {entry['dmg']}")
    if "def" in entry: extra.append(f"üõ° –ó–∞—â–∏—Ç–∞: {entry['def']}")
    if "bonus" in entry: extra.append(f"‚ú® –ë–æ–Ω—É—Å: {entry['bonus']}")
    stats_line = ("\n" + "\n".join(extra)) if extra else ""

    body = desc.strip() if desc else ""
    return f"{head}\n{body}{stats_line}".strip()


# ---------- –í–•–û–î –í –†–´–ù–û–ö ----------
@router.message(F.text.contains("–†—ã–Ω–æ–∫"))
async def open_market(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ–∫ –∏–∑ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –º–µ–Ω—é."""
    p = get_player(message.from_user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç—Ä–∏–Ω—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏–ª–∏ —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥ ¬´–≥—Ä—è–∑–Ω–∞—è¬ª
    shop = getattr(p, "shop_items", None)
    if not shop or getattr(p, "shop_dirty", False):
        shop = _roll_shop_items_for_player(p)
        p.shop_items = shop
        p.shop_dirty = False
        save_player(p)

    lines = ["üõí <b>–†—ã–Ω–æ–∫</b>", "–ß—Ç–æ –∂–µ–ª–∞–µ—à—å –∫—É–ø–∏—Ç—å?", f"–ú–æ–Ω–µ—Ç—ã: {p.gold}"]
    for i, it in enumerate(shop, start=1):
        lines.append(format_item_line(it, i))
    lines.append("\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await message.answer("\n\n".join(lines), reply_markup=_market_menu_kb())


# ---------- –ü–û–ö–£–ü–ö–ê ----------
@router.callback_query(F.data == "m_buy")
async def market_buy_menu(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    if not shop:
        await cb.message.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–π–¥–∏ –ø–æ–∑–∂–µ.", reply_markup=_market_menu_kb())
        return
    await cb.message.answer("–ß—Ç–æ –±–µ—Ä—ë—à—å? –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:", reply_markup=_buy_pick_kb(min(9, len(shop))))


@router.callback_query(F.data.regexp(r"^m_b_(\d+)$"))
async def market_buy_pick(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return
    item = shop[idx]
    text = format_item_line(item, idx + 1)
    await cb.message.answer(text, reply_markup=_confirm_kb(idx + 1))


@router.callback_query(F.data.regexp(r"^m_conf_(\d+)$"))
async def market_buy_confirm(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    shop: List[Dict] = getattr(p, "shop_items", [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(shop)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=_market_menu_kb()); return

    item = shop[idx]
    name, price = item["name"], int(item["price"])
    max_stack = item.get("max_stack")

    if p.gold < price:
        await cb.message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç."); return

    if max_stack:
        cur = p.inventory.get(name, 0)
        if cur >= max_stack:
            await cb.message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."); return

    if name not in p.inventory and len(p.inventory) >= 10:
        await cb.message.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω (10 —Å–ª–æ—Ç–æ–≤). –û—Å–≤–æ–±–æ–¥–∏ –º–µ—Å—Ç–æ."); return

    p.gold -= price
    p.inventory[name] = p.inventory.get(name, 0) + 1
    save_player(p)

    await cb.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
    await open_market(cb.message)


@router.callback_query(F.data == "m_back")
async def market_back(cb: types.CallbackQuery):
    await cb.answer()
    await open_market(cb.message)


# ---------- –ü–†–û–î–ê–ñ–ê ----------
def _lookup_price_for_sell(p, name: str) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏:
    1) –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ ‚Äî –±–µ—Ä—ë–º –µ–≥–æ —Ü–µ–Ω—É,
    2) –∏–Ω–∞—á–µ –∏—â–µ–º –≤ –±–∞–∑–µ —Ä—ã–Ω–∫–∞,
    3) –∏–Ω–∞—á–µ –∏—â–µ–º —Å—Ä–µ–¥–∏ –∫–∞–º–ø–∞–Ω–∏–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤,
    4) –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç 8.
    """
    # 1) —Ç–µ–∫—É—â–∞—è –≤–∏—Ç—Ä–∏–Ω–∞
    shop = getattr(p, "shop_items", []) or []
    base = next((it for it in shop if it.get("name") == name), None)
    if base is not None:
        return int(base.get("price", 8))

    # 2) –±–∞–∑–æ–≤—ã–π –ø—É–ª
    base_pool = _base_pool()
    base = next((it for it in base_pool if it.get("name") == name), None)
    if base is not None:
        return int(base.get("price", 8))

    # 3) –∫–∞–º–ø–∞–Ω–∏–∏
    camp = find_campaign_item_by_name(name)
    if camp is not None:
        return int(camp.get("price", 8))

    # 4) –¥–µ—Ñ–æ–ª—Ç
    return 8


@router.callback_query(F.data == "m_sell")
async def market_sell_menu(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)

    sale_list = [(name, cnt) for name, cnt in p.inventory.items()]
    if not sale_list:
        await cb.message.answer("–ü—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.", reply_markup=_market_menu_kb()); return

    lines = ["üí∞ <b>–°–∫—É–ø–∫–∞</b>", "–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ 1 —à—Ç. (50% –æ—Ç –±–∞–∑–æ–≤–æ–π):"]
    numbered: List[Tuple[str, int]] = []

    for i, (name, cnt) in enumerate(sale_list, start=1):
        base_price = _lookup_price_for_sell(p, name)
        sell_price = max(1, int(base_price * 0.5))
        lines.append(f"{i}. {name} ‚Äî {sell_price} –∑–æ–ª. (–≤ —Å—É–º–∫–µ: {cnt})")
        numbered.append((name, sell_price))

    _SALE_CACHE[user_id] = numbered
    await cb.message.answer("\n".join(lines), reply_markup=_sell_pick_kb(len(numbered)))


@router.callback_query(F.data.regexp(r"^m_s_(\d+)$"))
async def market_sell_pick(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    sale = _SALE_CACHE.get(user_id, [])
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(sale)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.", reply_markup=_market_menu_kb()); return

    name, price = sale[idx]
    if p.inventory.get(name, 0) <= 0:
        await cb.message.answer("–≠—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç.", reply_markup=_market_menu_kb()); return

    p.inventory[name] -= 1
    if p.inventory[name] <= 0:
        del p.inventory[name]
    p.gold += price
    save_player(p)

    await cb.message.answer(f"–ü—Ä–æ–¥–∞–Ω–æ: {name} –∑–∞ {price} –∑–æ–ª. –ë–∞–ª–∞–Ω—Å: {p.gold}")
    await open_market(cb.message)
