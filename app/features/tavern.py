# -*- coding: utf-8 -*-
# app/features/tavern.py
from __future__ import annotations

from typing import List, Dict, Tuple, Optional

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.core.storage import get_player, save_player
from app.core.config import USE_OPENAI, oai_client

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–û–£–¢–ï–†–ê
router = Router(name="tavern")

REST_FEE = 10  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞

# –ö—ç—à–∏ –≤—ã–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: user_id -> ...
_EQUIP_IDX_MAP: Dict[int, List[str]] = {}
_EQUIP_CHOICE: Dict[int, Tuple[str, str]] = {}  # (name, kind: 'weapon'|'armor')

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------

def tavern_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üõè –û—Ç–¥–æ—Ö–Ω—É—Ç—å ({REST_FEE} –∑–æ–ª.)", callback_data="t_rest"),
         InlineKeyboardButton(text="‚öôÔ∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="t_equip")],
    ])

def equip_pick_kb(keys: List[int]) -> InlineKeyboardMarkup:
    rows, row = [], []
    for n in keys:
        row.append(InlineKeyboardButton(text=str(n), callback_data=f"t_eq_{n}"))
        if len(row) == 4:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="t_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def equip_confirm_kb(slot_idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞–¥–µ—Ç—å", callback_data=f"t_econf_{slot_idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="t_back")],
    ])

def unequip_menu_kb(can_weapon: bool, can_armor: bool) -> InlineKeyboardMarkup:
    rows = []
    if can_weapon:
        rows.append([InlineKeyboardButton(text="üó° –°–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ", callback_data="t_u_weap")])
    if can_armor:
        rows.append([InlineKeyboardButton(text="üõ° –°–Ω—è—Ç—å –±—Ä–æ–Ω—é", callback_data="t_u_arm")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="t_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –†–ï–ü–õ–ò–ö–ò –¢–†–ê–ö–¢–ò–†–©–ò–ö–ê ----------

async def _npc_line() -> str:
    if USE_OPENAI and oai_client is not None:
        try:
            resp = await oai_client.chat.completions.create(
                model="gpt-4o-mini", temperature=0.9, max_tokens=80,
                messages=[
                    {"role": "system", "content": "–°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–¥–æ 12 —Å–ª–æ–≤) –æ—Ç —Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫–∞. –ë–µ–∑ Markdown."},
                    {"role": "user", "content": "–¢–µ–º–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ, —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏ –æ –Ω–æ—á–Ω—ã—Ö –≤–∏–∑–∏—Ç—ë—Ä–∞—Ö. –î–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Ä–µ–ø–ª–∏–∫—É."},
                ],
            )
            return f"–•–æ–∑—è–∏–Ω: {resp.choices[0].message.content.strip()}"
        except Exception:
            pass
    return "–•–æ–∑—è–∏–Ω: –†–∞–∑ —É–∂ –∑–∞–Ω–µ—Å–ª–æ ‚Äî –≥—Ä–µ–π—Å—è —É –æ–≥–Ω—è –∏ –¥–µ—Ä–∂–∏ —Å–≤–µ—á—É –ø–æ–¥ —Ä—É–∫–æ–π."

async def _npc_no_money_line(fee: int) -> str:
    if USE_OPENAI and oai_client is not None:
        try:
            resp = await oai_client.chat.completions.create(
                model="gpt-4o-mini", temperature=0.9, max_tokens=50,
                messages=[
                    {"role": "system", "content": "–û–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–ø–ª–∏–∫–∞ —Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫–∞, –æ—Ç–∫–∞–∑ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –¥–µ–Ω–µ–≥. –ë–µ–∑ Markdown."},
                    {"role": "user", "content": f"–ì–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ—Å—Ç–æ–π ({fee} –º–æ–Ω–µ—Ç)."},
                ],
            )
            return f"–•–æ–∑—è–∏–Ω: {resp.choices[0].message.content.strip()}"
        except Exception:
            pass
    return "–•–æ–∑—è–∏–Ω: –≠—Ö, –¥—Ä—É–∂–∏—â–µ, –±–µ–∑ –º–æ–Ω–µ—Ç –∏ –ø–æ—Å—Ç–µ–ª—å –Ω–µ —Å–æ–≥—Ä–µ–µ—Ç."

async def _npc_rest_success_line() -> str:
    if USE_OPENAI and oai_client is not None:
        try:
            resp = await oai_client.chat.completions.create(
                model="gpt-4o-mini", temperature=0.8, max_tokens=60,
                messages=[
                    {"role": "system", "content": "–û–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –æ–±–æ–¥—Ä—è—é—â–∞—è —Ä–µ–ø–ª–∏–∫–∞ –ø–æ—Å–ª–µ —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞. –ë–µ–∑ Markdown."},
                    {"role": "user", "content": "–ì–æ—Å—Ç—å –≤—ã—Å–ø–∞–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Ä–æ–≥–µ."},
                ],
            )
            return f"–•–æ–∑—è–∏–Ω: {resp.choices[0].message.content.strip()}"
        except Exception:
            pass
    return "–•–æ–∑—è–∏–Ω: –õ–∏—Ü–æ –ø–æ—Å–≤–µ–∂–µ–ª–æ ‚Äî –∑–Ω–∞—á–∏—Ç, –∫—Ä–æ–≤–∞—Ç—å —á–µ—Å—Ç–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞!"

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------

def _ability_uses_for_level(_: str, lvl: int, __: Optional[str]) -> int:
    lvl = max(1, int(lvl or 1))
    return 2 + lvl  # 1->3, 2->4, 3->5, ...

def _recharge_all_abilities(p) -> Dict[str, int]:
    charges: Dict[str, int] = {}
    for key, lvl in (p.abilities_known or {}).items():
        mx = _ability_uses_for_level(key, lvl, p.class_key)
        if mx > 0:
            charges[key] = mx
    return charges

def _weapon_category(name: str) -> str:
    low = (name or "").lower()
    if "–ª—É–∫" in low: return "bow"
    if "–ø–æ—Å–æ—Ö" in low: return "staff"
    if "–±—É–ª–∞–≤" in low: return "mace"
    if "–º–æ–ª–æ—Ç" in low: return "hammer"
    if "—Ç–æ–ø–æ—Ä" in low: return "axe"
    if "–∫–∏–Ω–∂–∞–ª" in low: return "dagger"
    if "–º–µ—á" in low: return "sword"
    return "other"

def _armor_material(name: str) -> Optional[str]:
    low = (name or "").lower()
    if "–º–∞–Ω—Ç" in low: return "robe"
    if "–∫–æ–∂–∞–Ω" in low: return "leather"
    if any(x in low for x in ["–ª–∞—Ç—ã", "–ª–∞—Ç–Ω–∞—è", "—Å—Ç–∞–ª—å", "–∂–µ–ª–µ–∑"]): return "heavy"
    return None

_WEAPON_ALLOW = {
    "swordsman": {"sword", "axe"},
    "archer":    {"bow"},
    "thief":     {"dagger"},
    "mage":      {"staff"},
    "acolyte":   {"mace", "hammer"},
    "merchant":  {"dagger", "mace"},
}

_ARMOR_ALLOW = {
    "swordsman": {"leather", "heavy"},
    "archer":    {"leather"},
    "thief":     {"leather"},
    "mage":      {"robe"},
    "acolyte":   {"robe", "leather"},
    "merchant":  {"leather"},
}

def _class_can_wear(p, item_name: str, is_armor: bool) -> bool:
    ck = (p.class_key or "").lower()
    if is_armor:
        mat = _armor_material(item_name)
        if mat is None:
            return True
        return mat in _ARMOR_ALLOW.get(ck, {"leather"})
    else:
        cat = _weapon_category(item_name)
        return cat in _WEAPON_ALLOW.get(ck, {"dagger"})

# ---------- –≠–ö–†–ê–ù –¢–ê–í–ï–†–ù–´ ----------

async def _show_tavern(message: types.Message, user_id: int) -> None:
    p = get_player(user_id)
    if p is None:
        await message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –Ω–∞–±–µ—Ä–∏ /start")
        return

    line = await _npc_line()
    await message.answer(
        f"üç∫ <b>–¢–∞–≤–µ—Ä–Ω–∞</b>\n{line}\n\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {p.hp}/{p.max_hp}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç—ã: {p.gold}\n"
        f"üõè –ù–æ—á–ª–µ–≥: {REST_FEE} –∑–æ–ª.",
        reply_markup=tavern_menu_kb()
    )

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.contains("–¢–∞–≤–µ—Ä–Ω–∞"))
async def tavern_open_msg(message: types.Message):
    await _show_tavern(message, message.from_user.id)

# ---------- –û–¢–î–´–• ----------

@router.callback_query(F.data == "t_rest")
async def tavern_rest(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p is None:
        await cb.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –Ω–∞–±–µ—Ä–∏ /start")
        return

    if p.gold < REST_FEE:
        await cb.message.answer(await _npc_no_money_line(REST_FEE))
        await _show_tavern(cb.message, user_id)
        return

    p.gold -= REST_FEE
    heal = p.max_hp - p.hp
    p.hp = p.max_hp
    p.ability_charges = _recharge_all_abilities(p)
    save_player(p)

    success_line = await _npc_rest_success_line()
    await cb.message.answer(
        f"–¢—ã –æ—Ç–¥–æ—Ö–Ω—É–ª(-–∞).\n"
        f"{success_line}\n\n"
        f"‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: +{heal}\n"
        f"ü™ô –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {p.gold} (‚àí{REST_FEE})"
    )
    await _show_tavern(cb.message, user_id)

# ---------- –≠–ö–ò–ü–ò–†–û–í–ö–ê ----------

@router.callback_query(F.data == "t_equip")
async def tavern_equip(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p is None:
        await cb.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –Ω–∞–±–µ—Ä–∏ /start")
        return

    items = list(p.inventory.items())
    lines = ["‚öôÔ∏è <b>–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞</b>", "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è:"]
    idx_map: List[str] = []

    for i, (name, cnt) in enumerate(items, start=1):
        low = name.lower()
        kind = "weapon" if any(x in low for x in ["–ª—É–∫","–ø–æ—Å–æ—Ö","–±—É–ª–∞–≤","–º–æ–ª–æ—Ç","—Ç–æ–ø–æ—Ä","–∫–∏–Ω–∂–∞–ª","–º–µ—á"]) else (
               "armor" if any(x in low for x in ["–º–∞–Ω—Ç","–∫–æ–∂–∞–Ω","–ª–∞—Ç—ã","–ª–∞—Ç–Ω–∞—è","—Å—Ç–∞–ª—å","–∂–µ–ª–µ–∑"]) else "consumable")
        if kind == "consumable":
            continue
        lines.append(f"{i}. {'üó°' if kind=='weapon' else 'üõ°'} {name} (x{cnt})")
        idx_map.append(name)

    if not idx_map:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –Ω–∞–¥–µ—Ç—å.\n–ó–∞–≥–ª—è–Ω–∏ –Ω–∞ —Ä—ã–Ω–æ–∫.", reply_markup=tavern_menu_kb())
        return

    lines.append("\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–µ—Ç—å, –Ω–∏–∂–µ ‚Äî –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–µ–∫—É—â–µ–µ).")
    _EQUIP_IDX_MAP[user_id] = idx_map

    cur_w = (p.equipment or {}).get("weapon") if p.equipment else None
    cur_a = (p.equipment or {}).get("armor") if p.equipment else None
    can_unw, can_una = cur_w is not None, cur_a is not None

    await cb.message.answer("\n".join(lines), reply_markup=equip_pick_kb(list(range(1, len(idx_map)+1))))
    await cb.message.answer("–°–Ω—è—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ?", reply_markup=unequip_menu_kb(can_unw, can_una))

@router.callback_query(F.data.regexp(r"^t_eq_(\d+)$"))
async def tavern_equip_pick(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p is None:
        await cb.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –Ω–∞–±–µ—Ä–∏ /start")
        return

    idx_map: List[str] = _EQUIP_IDX_MAP.get(user_id, [])
    if not idx_map:
        await cb.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –û—Ç–∫—Ä–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ."); return

    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(idx_map)):
        await cb.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä."); return

    name = idx_map[idx]
    low = name.lower()
    kind = "weapon" if any(x in low for x in ["–ª—É–∫","–ø–æ—Å–æ—Ö","–±—É–ª–∞–≤","–º–æ–ª–æ—Ç","—Ç–æ–ø–æ—Ä","–∫–∏–Ω–∂–∞–ª","–º–µ—á"]) else "armor"

    if not _class_can_wear(p, name, is_armor=(kind == "armor")):
        await cb.message.answer("–¢–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=tavern_menu_kb())
        return

    _EQUIP_CHOICE[user_id] = (name, kind)
    await cb.message.answer(f"–ù–∞–¥–µ—Ç—å: {name}?", reply_markup=equip_confirm_kb(idx+1))

@router.callback_query(F.data.regexp(r"^t_econf_(\d+)$"))
async def tavern_equip_confirm(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p is None:
        await cb.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –Ω–∞–±–µ—Ä–∏ /start")
        return

    choice = _EQUIP_CHOICE.pop(user_id, None)
    if not choice:
        await cb.message.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.", reply_markup=tavern_menu_kb()); return

    name, kind = choice
    if p.inventory.get(name, 0) <= 0:
        await cb.message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å—É–º–∫–µ.", reply_markup=tavern_menu_kb()); return

    if not p.equipment:
        p.equipment = {}
    p.equipment["weapon" if kind == "weapon" else "armor"] = name
    save_player(p)

    await cb.message.answer(f"–ù–∞–¥–µ—Ç–æ: {name} ({'–æ—Ä—É–∂–∏–µ' if kind=='weapon' else '–±—Ä–æ–Ω—è'}).")
    await _show_tavern(cb.message, user_id)

@router.callback_query(F.data == "t_u_weap")
async def tavern_unequip_weapon(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p and p.equipment and p.equipment.get("weapon"):
        p.equipment["weapon"] = None
        save_player(p)
        await cb.message.answer("–û—Ä—É–∂–∏–µ —Å–Ω—è—Ç–æ.")
    else:
        await cb.message.answer("–ù–µ—á–µ–≥–æ —Å–Ω–∏–º–∞—Ç—å.")
    await _show_tavern(cb.message, user_id)

@router.callback_query(F.data == "t_u_arm")
async def tavern_unequip_armor(cb: types.CallbackQuery):
    await cb.answer()
    user_id = cb.from_user.id
    p = get_player(user_id)
    if p and p.equipment and p.equipment.get("armor"):
        p.equipment["armor"] = None
        save_player(p)
        await cb.message.answer("–ë—Ä–æ–Ω—è —Å–Ω—è—Ç–∞.")
    else:
        await cb.message.answer("–ù–µ—á–µ–≥–æ —Å–Ω–∏–º–∞—Ç—å.")
    await _show_tavern(cb.message, user_id)

@router.callback_query(F.data == "t_back")
async def tavern_back(cb: types.CallbackQuery):
    await cb.answer()
    await _show_tavern(cb.message, cb.from_user.id)
