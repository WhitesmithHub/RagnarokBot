# -*- coding: utf-8 -*-
# app/features/tavern.py
from __future__ import annotations

from typing import List, Dict

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.core.storage import get_player, save_player
from app.ui.keyboards import city_menu_kb
from app.core.config import USE_OPENAI, oai_client

router = Router()

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

def tavern_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõå –û—Ç–¥–æ—Ö–Ω—É—Ç—å", callback_data="t_rest"),
         InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="t_save")],
        [InlineKeyboardButton(text="‚öî –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="t_equip")],
        [InlineKeyboardButton(text="üèòÔ∏è –í –≥–æ—Ä–æ–¥", callback_data="t_town")],
    ])

def equip_pick_kb(keys: List[int]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for n in keys:
        row.append(InlineKeyboardButton(text=str(n), callback_data=f"t_eq_{n}"))
        if len(row) == 4:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="t_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def equip_confirm_kb(slot_idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞–¥–µ—Ç—å", callback_data=f"t_econf_{slot_idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="t_back")],
    ])

def unequip_menu_kb(can_weapon: bool, can_armor: bool) -> InlineKeyboardMarkup:
    rows = []
    if can_weapon:
        rows.append([InlineKeyboardButton(text="üó°Ô∏è –°–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ", callback_data="t_u_weap")])
    if can_armor:
        rows.append([InlineKeyboardButton(text="üõ°Ô∏è –°–Ω—è—Ç—å –±—Ä–æ–Ω—é", callback_data="t_u_arm")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="t_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –¢—Ä–∞–∫—Ç–∏—Ä ----------

async def _npc_line() -> str:
    if USE_OPENAI and oai_client is not None:
        try:
            resp = await oai_client.chat.completions.create(
                model="gpt-4o-mini",
                temperature=0.9,
                max_tokens=80,
                messages=[
                    {"role": "system", "content": "–û–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ç—ë–ø–ª–∞—è —Ä–µ–ø–ª–∏–∫–∞ —Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫–∞-—Å—Ç–∞—Ä–∏–∫–∞ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ë–µ–∑ Markdown."},
                    {"role": "user", "content": "–ì–æ—Ä–æ–¥—Å–∫–∞—è —Ç–∞–≤–µ—Ä–Ω–∞, –≥–µ—Ä–æ–π –∑–∞—Ö–æ–¥–∏—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."},
                ],
            )
            return f"üë¥ –¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫: ¬´{resp.choices[0].message.content.strip()}¬ª"
        except Exception:
            pass
    return "üë¥ –¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫: ¬´–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –£ –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç—Å—è –º–µ—Å—Ç–æ –∏ –∫—Ä—É–∂–∫–∞ —ç–ª—è –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –¥—É—Ö–∞.¬ª"

@router.message(F.text.in_(["üç∫ –¢–∞–≤–µ—Ä–Ω–∞", "–¢–∞–≤–µ—Ä–Ω–∞"]))
async def tavern_open(message: types.Message):
    p = get_player(message.from_user.id)
    line = await _npc_line()
    await message.answer(
        f"üç∫ <b>–¢–∞–≤–µ—Ä–Ω–∞</b>\n{line}\n\n–ó–¥–æ—Ä–æ–≤—å–µ: {p.hp}/{p.max_hp}\n–ó–æ–ª–æ—Ç–æ: {p.gold}",
        reply_markup=tavern_menu_kb()
    )

# ---------- –û—Ç–¥—ã—Ö / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----------

@router.callback_query(F.data == "t_rest")
async def tavern_rest(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é + –ø–µ—Ä–µ–∑–∞—Ä—è–¥ —É–º–µ–Ω–∏–π
    heal = p.max_hp - p.hp
    p.hp = p.max_hp

    from app.features.character import ability_uses_for_level
    charges: Dict[str, int] = {}
    for key, lvl in (p.abilities_known or {}).items():
        mx = ability_uses_for_level(key, lvl, p.class_key)
        if mx > 0:
            charges[key] = mx
    p.ability_charges = charges
    save_player(p)

    await cb.message.answer(
        f"üõå –¢—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å –∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä–∏–ª–∏–≤ —Å–∏–ª.\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {p.hp}/{p.max_hp} (+{heal})"
    )
    await tavern_open(cb.message)

@router.callback_query(F.data == "t_save")
async def tavern_save(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)

    fee = 5  # —Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if p.gold < fee:
        await cb.message.answer("üë¥ –¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫: ¬´–≠–π, –±–µ–∑ –¥–µ–Ω–µ–≥ ‚Äî –±–µ–∑ –ø–æ—Å—Ç–µ–ª–∏! –ü—Ä–æ–≤–∞–ª–∏–≤–∞–π.¬ª")
        # –Ω–æ –ø–æ –¢–ó –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (–±–µ–∑ –±–æ–Ω—É—Å–æ–≤)
    else:
        p.gold -= fee
        save_player(p)
        await cb.message.answer(f"üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ó–æ–ª–æ—Ç–æ -{fee}. üëõ {p.gold}")
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å snapshot –≤ —Ñ–∞–π–ª—ã
    await tavern_open(cb.message)

# ---------- –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ ----------

def _class_can_wear(p, item_name: str, is_armor: bool, material: str | None) -> bool:
    """
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    - –†–æ–±—É/—Ä—è—Å—ã/–º–∞–Ω—Ç–∏–∏ (material='robe') –ù–ï –º–æ–≥—É—Ç –Ω–æ—Å–∏—Ç—å: –ú–µ—á–Ω–∏–∫/–õ—É—á–Ω–∏–∫/–í–æ—Ä/–¢–æ—Ä–≥–æ–≤–µ—Ü –∏ –∏—Ö –≤–µ—Ç–∫–∏.
    - –¢—è–∂—ë–ª–∞—è/–º–µ—Ç–∞–ª–ª (–ø–æ —Å–ª–æ–≤–∞–º '–ª–∞—Ç—ã','–∫–æ–ª—å—á—É–≥','–ø–∞–Ω—Ü–∏—Ä') –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –ü–æ—Å–ª—É—à–Ω–∏–∫–∞/–ú–∞–≥–∞ –∏ –∏—Ö –≤–µ—Ç–æ–∫.
    """
    low = (item_name or "").lower()
    ck = (p.class_key or "").lower()

    if is_armor:
        if material == "robe":
            if any(x in ck for x in ["swordsman","archer","thief","merchant"]):
                return False
        if any(x in low for x in ["–ª–∞—Ç—ã","–∫–æ–ª—å—á—É–≥","–ø–∞–Ω—Ü–∏—Ä","—Ç—è–∂"]):
            if any(x in ck for x in ["acolyte","mage"]):
                return False
    else:
        # –æ—Ä—É–∂–∏–µ: —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ
        pass
    return True

@router.callback_query(F.data == "t_equip")
async def tavern_equip(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)

    # —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    items = list(p.inventory.items())
    if not items:
        await cb.message.answer("‚öî –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞\n–û—Ä—É–∂–∏—è –Ω–µ—Ç.\n\n–ë—Ä–æ–Ω–∏ –Ω–µ—Ç.", reply_markup=tavern_menu_kb())
        return

    lines = ["‚öî <b>–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞</b>", "–û—Ä—É–∂–∏–µ:"]
    idx_map: List[str] = []
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ?
    for i, (name, cnt) in enumerate(items, start=1):
        low = name.lower()
        kind = "weapon" if any(x in low for x in ["–º–µ—á","—Å–∞–±–ª","–∫–ª–∏–Ω–æ–∫","–∫–∏–Ω–∂–∞–ª","–Ω–æ–∂","—Ç–æ–ø–æ—Ä","–ª—É–∫","–ø–æ—Å–æ—Ö","–±—É–ª–∞–≤","–∂–µ–∑–ª"]) else (
               "armor" if any(x in low for x in ["–±—Ä–æ–Ω","–ª–∞—Ç—ã","–∫–æ–ª—å—á—É–≥","–ø–∞–Ω—Ü–∏—Ä","—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç"]) else "consumable")
        material = "leather" if "–∫–æ–∂–∞–Ω" in low else ("robe" if any(x in low for x in ["—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç"]) else None)

        if kind == "weapon":
            lines.append(f"{i}. üó°Ô∏è {name} (√ó{cnt})")
        elif kind == "armor":
            lines.append(f"{i}. üõ°Ô∏è {name} (√ó{cnt})")
        else:
            # —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ —Ç—É—Ç –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥–µ—Ç—å
            continue

        idx_map.append(name)

    if not idx_map:
        lines.append("\n–ù–µ—á–µ–≥–æ –Ω–∞–¥–µ–≤–∞—Ç—å.")
        await cb.message.answer("\n".join(lines), reply_markup=tavern_menu_kb())
        return

    # –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏ –º–µ–Ω—é ¬´—Å–Ω—è—Ç—å¬ª
    cur_w = (p.equipment or {}).get("weapon") if p.equipment else None
    cur_a = (p.equipment or {}).get("armor") if p.equipment else None
    lines.append("\n–ù–∞–∂–º–∏ –Ω–æ–º–µ—Ä, —á—Ç–æ –Ω–∞–¥–µ—Ç—å (üó°Ô∏è ‚Äî –æ—Ä—É–∂–∏–µ, üõ°Ô∏è ‚Äî –±—Ä–æ–Ω—è).")

    can_unw = cur_w is not None
    can_una = cur_a is not None
    await cb.message.answer("\n".join(lines), reply_markup=equip_pick_kb(list(range(1, len(idx_map)+1))))
    await cb.message.answer("–°–Ω—è—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É?", reply_markup=unequip_menu_kb(can_unw, can_una))

    # –ø—Ä–∏–≤—è–∂–µ–º –∫–∞—Ä—Ç—É –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    cb.message.eq_map = idx_map

@router.callback_query(F.data.regexp(r"^t_eq_(\d+)$"))
async def tavern_equip_pick(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    idx_map: List[str] = getattr(cb.message, "eq_map", [])
    if not idx_map:
        await cb.message.answer("–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ ¬´–≠–∫–∏–ø–∏—Ä–æ–≤–∫—É¬ª."); return
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(idx_map)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞."); return

    name = idx_map[idx]
    # –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø
    low = name.lower()
    kind = "weapon" if any(x in low for x in ["–º–µ—á","—Å–∞–±–ª","–∫–ª–∏–Ω–æ–∫","–∫–∏–Ω–∂–∞–ª","–Ω–æ–∂","—Ç–æ–ø–æ—Ä","–ª—É–∫","–ø–æ—Å–æ—Ö","–±—É–ª–∞–≤","–∂–µ–∑–ª"]) else (
           "armor" if any(x in low for x in ["–±—Ä–æ–Ω","–ª–∞—Ç—ã","–∫–æ–ª—å—á—É–≥","–ø–∞–Ω—Ü–∏—Ä","—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç"]) else "consumable")
    material = "leather" if "–∫–æ–∂–∞–Ω" in low else ("robe" if any(x in low for x in ["—Ä–æ–±","—Ä—è—Å–∞","–º–∞–Ω—Ç"]) else None)

    if kind == "consumable":
        await cb.message.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –Ω–∞–¥–µ—Ç—å.", reply_markup=tavern_menu_kb()); return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞/–º–∞—Ç–µ—Ä–∏–∞–ª–∞
    if not _class_can_wear(p, name, is_armor=(kind=="armor"), material=material):
        await cb.message.answer(
            "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.",
            reply_markup=tavern_menu_kb()
        )
        return

    # –∫–∞—Ä—Ç–æ—á–∫–∞ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await cb.message.answer(f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {name}\n–ù–∞–¥–µ—Ç—å?", reply_markup=equip_confirm_kb(idx+1))
    cb.message.eq_choice = (name, kind)

@router.callback_query(F.data.regexp(r"^t_econf_(\d+)$"))
async def tavern_equip_confirm(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    choice = getattr(cb.message, "eq_choice", None)
    if not choice:
        await cb.message.answer("–í—ã–±–æ—Ä —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ ¬´–≠–∫–∏–ø–∏—Ä–æ–≤–∫—É¬ª.", reply_markup=tavern_menu_kb()); return
    name, kind = choice

    if p.inventory.get(name, 0) <= 0:
        await cb.message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É–∂–µ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", reply_markup=tavern_menu_kb()); return

    if not p.equipment:
        p.equipment = {}
    # —ç–∫–∏–ø–∏—Ä—É–µ–º (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª—è–µ–º, –æ–Ω ¬´–≤ —Å—É–Ω–¥—É–∫¬ª ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ)
    p.equipment["weapon" if kind == "weapon" else "armor"] = name
    save_player(p)

    await cb.message.answer(f"‚úÖ –ù–∞–¥–µ—Ç–æ: {name} ({'–æ—Ä—É–∂–∏–µ' if kind=='weapon' else '–±—Ä–æ–Ω—è'}).")
    await tavern_open(cb.message)

@router.callback_query(F.data == "t_u_weap")
async def tavern_unequip_weapon(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    if p.equipment and p.equipment.get("weapon"):
        p.equipment["weapon"] = None
        save_player(p)
        await cb.message.answer("üó°Ô∏è –û—Ä—É–∂–∏–µ —Å–Ω—è—Ç–æ.")
    else:
        await cb.message.answer("–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–¥–µ—Ç–æ.")
    await tavern_open(cb.message)

@router.callback_query(F.data == "t_u_arm")
async def tavern_unequip_armor(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    if p.equipment and p.equipment.get("armor"):
        p.equipment["armor"] = None
        save_player(p)
        await cb.message.answer("üõ°Ô∏è –ë—Ä–æ–Ω—è —Å–Ω—è—Ç–∞.")
    else:
        await cb.message.answer("–ë—Ä–æ–Ω—è –Ω–µ –Ω–∞–¥–µ—Ç–∞.")
    await tavern_open(cb.message)

@router.callback_query(F.data == "t_back")
async def tavern_back(cb: types.CallbackQuery):
    await cb.answer()
    await tavern_open(cb.message)

@router.callback_query(F.data == "t_town")
async def tavern_to_town(cb: types.CallbackQuery):
    await cb.answer()
    from app.features.city import go_city
    await go_city(cb.message)
