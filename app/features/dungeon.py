# -*- coding: utf-8 -*-
# app/features/dungeon.py
from __future__ import annotations
import random
from dataclasses import dataclass
from typing import Optional, Dict, List

from aiogram import Router, F, types

from app.core.storage import get_player, save_player
from app.ui.keyboards import room_actions_kb, combat_actions_kb, skills_pick_kb, dungeon_pick_kb, confirm_leave_dungeon_kb
from app.core.config import USE_OPENAI, oai_client
from app.features.market import clear_market_for_player

router = Router()
_rng = random.SystemRandom()

@dataclass
class RoomState:
    room_id: int = 1
    camped: bool = False
    has_exit: bool = True
    in_combat: bool = False
    enemy: Optional[str] = None
    enemy_hp: int = 0
    dungeon_name: Optional[str] = None

# ---------- GPT-—Ö–µ–ª–ø–µ—Ä ----------
async def _gpt(sys: str, usr: str, max_tokens: int = 180) -> str:
    if not USE_OPENAI or oai_client is None:
        return usr
    try:
        r = await oai_client.chat.completions.create(
            model="gpt-4o-mini", temperature=0.95, max_tokens=max_tokens,
            messages=[{"role":"system","content":sys},{"role":"user","content":usr}],
        )
        return r.choices[0].message.content.strip()
    except Exception:
        return usr

def _ensure_state(p):
    if not hasattr(p, "dng") or p.dng is None:
        p.dng = RoomState()

# ---------- –í—Ö–æ–¥: –≤—ã–±–æ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π ----------
async def show_dungeon_picker(message: types.Message):
    p = get_player(message.from_user.id)
    if not p:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start"); return
    names = getattr(p, "dungeon_names", None) or ["–ó–∞–º–æ–∫ –¢–µ–Ω–µ–π","–ö–∞—Ç–∞–∫–æ–º–±—ã –ú—Ä–∞–∫–∞","–ü–µ—â–µ—Ä—ã –®—ë–ø–æ—Ç–∞"]
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ:", reply_markup=dungeon_pick_kb(names))

@router.message(F.text.in_(["üï≥Ô∏è –ü–æ–¥–∑–µ–º–µ–ª—å—è", "–ü–æ–¥–∑–µ–º–µ–ª—å—è"]))
async def dungeons_entry(message: types.Message):
    await show_dungeon_picker(message)

@router.callback_query(F.data == "dng_back_city")
async def dng_back_city(cb: types.CallbackQuery):
    await cb.answer()
    from app.features.city import go_city
    await go_city(cb.message)

@router.callback_query(F.data.regexp(r"^dng_pick_(\d+)$"))
async def choose_dungeon(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    names: List[str] = getattr(p, "dungeon_names", None) or ["–ó–∞–º–æ–∫ –¢–µ–Ω–µ–π","–ö–∞—Ç–∞–∫–æ–º–±—ã –ú—Ä–∞–∫–∞","–ü–µ—â–µ—Ä—ã –®—ë–ø–æ—Ç–∞"]
    idx = int(cb.data.split("_")[-1]) - 1
    if not (0 <= idx < len(names)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."); return
    picked = names[idx]

    # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ –≤—Ö–æ–¥–∞
    event_type = _rng.choice(["bandits","blessing","merchants","trap","omen"])
    delta_hp = 0; delta_gold = 0; bonus_item: Optional[str] = None

    if event_type == "bandits":
        loss = min(p.gold, _rng.randrange(3, 10))
        delta_gold = -loss; p.gold += delta_gold
        sys = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ, 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–µ—Ä–æ–π –æ–¥–∏–Ω. –î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ª–æ–≥."
        usr = f"{p.name} —É –≤–æ—Ä–æ—Ç ¬´{picked}¬ª —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –±–∞–Ω–¥–∏—Ç–∞–º–∏ –∏ —Ç–µ—Ä—è–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞."
    elif event_type == "blessing":
        heal = min(p.max_hp - p.hp, _rng.randrange(2, 6))
        delta_hp = heal; p.hp += heal
        sys = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ, 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–µ—Ä–æ–π –æ–¥–∏–Ω; –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∏ –ª—ë–≥–∫–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ."
        usr = f"–ü–æ –¥–æ—Ä–æ–≥–µ –∫ ¬´{picked}¬ª —Å—Ç—Ä–∞–Ω–Ω–∏–∫-–º–æ–Ω–∞—Ö –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–µ—Ç –≥–µ—Ä–æ—è."
    elif event_type == "merchants":
        bonus_item = _rng.choice(["–ü—Ä–æ–≤–∏–∞–Ω—Ç","–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"])
        p.inventory[bonus_item] = p.inventory.get(bonus_item,0)+1
        sys = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ, 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π; –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Ä–≥ —Å –∫–∞—Ä–∞–≤–∞–Ω–æ–º –∏ —É–¥–∞—á–Ω–∞—è –º–µ–ª–æ—á—å."
        usr = f"–ü–µ—Ä–µ–¥ ¬´{picked}¬ª –∫–∞—Ä–∞–≤–∞–Ω, –≥–µ—Ä–æ–π –≤—ã—Ç–æ—Ä–≥–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç: {bonus_item}."
    elif event_type == "trap":
        dmg = _rng.randrange(1, 4)
        delta_hp = -min(p.hp, dmg); p.hp += delta_hp
        sys = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ, 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –õ–æ–≤—É—à–∫–∞ –ø—Ä–∏—á–∏–Ω—è–µ—Ç –±–æ–ª—å, –Ω–æ –≥–µ—Ä–æ–π –≤—ã–∂–∏–≤–∞–µ—Ç."
        usr = f"–ù–∞ —Ç—Ä–æ–ø–µ –∫ ¬´{picked}¬ª —Å–∫—Ä—ã—Ç –∫–∞–ø–∫–∞–Ω; –≥–µ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω."
    else:
        sys = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ, 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ó–ª–æ–≤–µ—â–µ–µ –ø—Ä–µ–¥–∑–Ω–∞–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –≥–µ—Ä–æ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å –¥—É—Ö–æ–º."
        usr = f"–ü–µ—Ä–µ–¥ ¬´{picked}¬ª –≥–µ—Ä–æ–π –≤–∏–¥–∏—Ç –¥—É—Ä–Ω–æ–π –∑–Ω–∞–∫, –Ω–æ —Ä–µ—à–∞–µ—Ç—Å—è –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ."

    save_player(p)
    prose = await _gpt(sys, usr, 220)
    tail = []
    if delta_gold: tail.append(f"üëõ –ó–æ–ª–æ—Ç–æ: {p.gold} ({'‚àí' if delta_gold<0 else '+'}{abs(delta_gold)})")
    if delta_hp:   tail.append(f"‚ù§Ô∏è HP: {p.hp}/{p.max_hp} ({'‚àí' if delta_hp<0 else '+'}{abs(delta_hp)})")
    if bonus_item: tail.append(f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {bonus_item}")
    tail_text = ("\n" + "\n".join(tail)) if tail else ""
    await cb.message.answer(f"üõ§ {prose}{tail_text}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É
    _ensure_state(p)
    p.dng = RoomState(room_id=1, camped=False, has_exit=True, in_combat=False, dungeon_name=picked)
    save_player(p)

    enter = await _gpt(
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ—Ä–æ—è. 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: –≤—Ö–æ–¥ –∏ –ø–µ—Ä–≤—ã–π –∑–∞–ª –ø–æ–¥–∑–µ–º–µ–ª—å—è.",
        f"{p.name} –≤—Ö–æ–¥–∏—Ç –≤ ¬´{picked}¬ª. –•–æ–ª–æ–¥, —Å—ã—Ä–æ—Å—Ç—å –∏ –¥–∞–ª—ë–∫–æ–µ —ç—Ö–æ –∫–∞–ø–µ–ª—å."
    )
    await cb.message.answer(f"üö∂ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ ¬´{picked}¬ª.\n{enter}",
                            reply_markup=room_actions_kb(can_camp=True, has_exit=True))

# ---------- –î–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ ----------
@router.callback_query(F.data == "dng_search")
async def dng_search(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st: RoomState = getattr(p, "dng", RoomState())
    desc = await _gpt(
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ—Ä–æ—è. 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤–∏–¥–∏—Ç –≥–µ—Ä–æ–π –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è.",
        f"{p.name} –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–ª ¬´{st.dungeon_name or '–ø–æ–¥–∑–µ–º–µ–ª—å–µ'}¬ª."
    )
    # 50% –ø—É—Å—Ç–æ, 30% —Ä–µ—Å—É—Ä—Å—ã, 20% –ø—Ä–µ–¥–º–µ—Ç
    roll = _rng.random()
    found = ""
    if roll < 0.5:
        found = "–ù–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è."
    elif roll < 0.8:
        pick = _rng.choice(["–ñ–µ–ª–µ–∑–æ", "–°–∞–º–æ—Ü–≤–µ—Ç", "–¢—Ä–∞–≤—ã", "–ö–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∑–≤–µ—Ä—è"])
        p.inventory[pick] = p.inventory.get(pick, 0) + 1
        save_player(p)
        found = f"–ù–∞—Ö–æ–¥–∫–∞: {pick} (√ó1)."
    else:
        pick = _rng.choice(["–ü—Ä–æ–≤–∏–∞–Ω—Ç", "–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", "–ö–∏–Ω–∂–∞–ª", "–õ—É–∫ –æ—Ö–æ—Ç–Ω–∏–∫–∞"])
        p.inventory[pick] = p.inventory.get(pick, 0) + 1
        save_player(p)
        found = f"–ö–∞–∂–µ—Ç—Å—è, –ø–æ–≤–µ–∑–ª–æ: {pick}."
    await cb.message.answer(f"üîé {desc}\n\n{found}",
                            reply_markup=room_actions_kb(can_camp=not st.camped, has_exit=True))

@router.callback_query(F.data == "dng_camp")
async def dng_camp(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st: RoomState = getattr(p, "dng", RoomState())
    if st.camped:
        await cb.message.answer("–ó–¥–µ—Å—å —É–∂–µ –±—ã–ª –ø—Ä–∏–≤–∞–ª.", reply_markup=room_actions_kb(can_camp=False, has_exit=True)); return
    if p.inventory.get("–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", 0) <= 0:
        await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–±–æ—Ä–∞ –¥–ª—è –∫–æ—Å—Ç—Ä–∞.", reply_markup=room_actions_kb(can_camp=False, has_exit=True)); return

    p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"] -= 1
    if p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"] <= 0:
        del p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"]

    heal = min(p.max_hp - p.hp, _rng.randrange(3, 7))
    p.hp += heal
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —É–º–µ–Ω–∏–π: +1 –∫ –º–∞–∫—Å–∏–º—É–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ, –Ω–æ –Ω–µ –≤—ã—à–µ 5
    for k, lvl in (p.ability_charges or {}).items():
        mx = min(5, (p.abilities_known.get(k,1) + 2))
        p.ability_charges[k] = mx
    st.camped = True
    save_player(p)

    prose = await _gpt(
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ—Ä–æ—è. 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–æ—Ä–æ—Ç–∫–æ–º –ø—Ä–∏–≤–∞–ª–µ –≤ –º—Ä–∞—á–Ω–æ–º –∑–∞–ª–µ; —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑.",
        f"{p.name} —Ä–∞–∑–≤–æ–¥–∏—Ç –º–∞–ª–µ–Ω—å–∫–∏–π –∫–æ—Å—Ç—ë—Ä –∏ –æ—Ç–¥—ã—Ö–∞–µ—Ç, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—è—Å—å –∫ —à—ë–ø–æ—Ç—É –∏–∑ –∫–∞–º–µ–Ω–Ω—ã—Ö —â–µ–ª–µ–π."
    )
    charges_line = " ".join([f"{k}: {p.ability_charges.get(k,0)}/{p.ability_charges.get(k,0)} (+1)" for k in (p.ability_charges or {})]) or "‚Äî"
    await cb.message.answer(f"üî• {prose}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {p.hp}/{p.max_hp} (+{heal})\n{charges_line}",
                            reply_markup=room_actions_kb(can_camp=False, has_exit=True))

@router.callback_query(F.data == "dng_next")
async def dng_next(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st: RoomState = getattr(p, "dng", RoomState())
    st.room_id += 1
    st.camped = False
    save_player(p)

    prose = await _gpt(
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ—Ä–æ—è. 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –≥–µ—Ä–æ–π –∏–¥—ë—Ç –¥–∞–ª—å—à–µ –ø–æ –º—Ä–∞—á–Ω–æ–º—É –ø–æ–¥–∑–µ–º–µ–ª—å—é; –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ.",
        f"{p.name} —É–≥–ª—É–±–ª—è–µ—Ç—Å—è –≤ ¬´{st.dungeon_name or '–ø–æ–¥–∑–µ–º–µ–ª—å–µ'}¬ª, –∫–æ—Ä–∏–¥–æ—Ä—ã —Å—É–∂–∞—é—Ç—Å—è, –≤–æ–∑–¥—É—Ö —Ç—è–∂–µ–ª–µ–µ."
    )
    await cb.message.answer(f"‚û°Ô∏è {prose}",
                            reply_markup=room_actions_kb(can_camp=True, has_exit=True))

# ---------- –í—ã—Ö–æ–¥ ----------
@router.callback_query(F.data == "dng_escape")
async def dng_escape(cb: types.CallbackQuery):
    await cb.answer()
    await cb.message.answer("–ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ?", reply_markup=confirm_leave_dungeon_kb())

@router.callback_query(F.data == "dng_leave_yes")
async def dng_leave_yes(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    # –û–±–Ω–æ–≤–∏–º —Ä—ã–Ω–æ–∫ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    clear_market_for_player(cb.from_user.id)
    picked = getattr(p, "dng", RoomState()).dungeon_name or "–ø–æ–¥–∑–µ–º–µ–ª—å–µ"
    await cb.message.answer(f"‚¨ÜÔ∏è –¢—ã –ø–æ–∫–∏–¥–∞–µ—à—å ¬´{picked}¬ª.")
    from app.features.city import go_city
    await go_city(cb.message)

@router.callback_query(F.data == "dng_leave_no")
async def dng_leave_no(cb: types.CallbackQuery):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st: RoomState = getattr(p, "dng", RoomState())
    await cb.message.answer("–û—Å—Ç–∞—ë—à—å—Å—è –µ—â—ë –Ω–µ–Ω–∞–¥–æ–ª–≥–æ.",
                            reply_markup=room_actions_kb(can_camp=not st.camped, has_exit=True))
