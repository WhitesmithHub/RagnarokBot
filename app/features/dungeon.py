# -*- coding: utf-8 -*-
# app/features/dungeon.py
from __future__ import annotations

import random
from dataclasses import dataclass, asdict
from typing import Optional, List, Dict

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from app.core.storage import get_player, save_player
from app.core.monsters import theme_names_from_story, roll_monster
from app.core.dice import d, roll, check_dc
from app.core.emoji import decorate_item_name
from app.ui.keyboards import (
    dungeon_pick_kb, room_actions_kb, confirm_leave_dungeon_kb,
    combat_actions_kb, skills_pick_kb, back_to_city_kb
)
from app.features.market import clear_market_for_player
from app.core.config import USE_OPENAI, oai_client

router = Router()

MAX_ROOMS_PER_FLOOR = 10

@dataclass
class DungeonState:
    active: bool = False
    theme: str = ""
    floor: int = 1
    room: int = 0
    found_exit: bool = False
    camped_in_room: bool = False
    in_combat: bool = False
    enemy: Optional[dict] = None
    turn: str = "player"
    player_defending: bool = False  # —Ñ–ª–∞–≥ –∑–∞—â–∏—Ç—ã –Ω–∞ —Ö–æ–¥

def _get_dng(user_id: int) -> DungeonState:
    p = get_player(user_id)
    if not hasattr(p, "dungeon"):
        p.dungeon = DungeonState().__dict__
        save_player(p)
    return DungeonState(**p.dungeon)

def _save_dng(user_id: int, st: DungeonState):
    p = get_player(user_id)
    p.dungeon = asdict(st)
    save_player(p)

def _reset_ability_charges(p):
    from app.features.character import ability_uses_for_level
    p.ability_charges = p.__dict__.get("ability_charges", {})
    p.ability_charges.clear()
    for key, lvl in (p.abilities_known or {}).items():
        uses = ability_uses_for_level(key, lvl, p.class_key)
        if uses > 0:
            p.ability_charges[key] = uses
    save_player(p)

def _room_text(st: DungeonState) -> str:
    return f"üï≥Ô∏è <b>{st.theme}</b>\n–≠—Ç–∞–∂: {st.floor} | –ö–æ–º–Ω–∞—Ç–∞: {st.room}/{MAX_ROOMS_PER_FLOOR}"

# -------- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–∫—Å—Ç–∞ (–û–î–ò–ù –≥–µ—Ä–æ–π) --------

async def generate_travel_text(city: str, theme: str, name: str, gender: str) -> str:
    if not USE_OPENAI or oai_client is None:
        return (f"üö∂ –ü—É—Ç—å –∏–∑ {city} –∫ ¬´{theme}¬ª —Ç—è–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å—É–º—Ä–∞—á–Ω—ã–µ –ø–µ—Ä–µ–ª–µ—Å–∫–∏. "
                f"{name} –∏–¥—ë—Ç –æ–¥–∏–Ω, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—è—Å—å –∫ –∫–∞–∂–¥–æ–º—É —à–æ—Ä–æ—Ö—É.")
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.95,
            max_tokens=180,
            messages=[
                {"role": "system", "content": (
                    "–û–ø–∏—à–∏ 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –¥–æ—Ä–æ–≥–µ –û–î–ò–ù–û–ö–û–ì–û –≥–µ—Ä–æ—è –∏–∑ –≥–æ—Ä–æ–¥–∞ –∫ –ø–æ–¥–∑–µ–º–µ–ª—å—é. "
                    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, —Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ. –ë–µ–∑ Markdown."
                )},
                {"role": "user", "content": f"–ì–µ—Ä–æ–π: {name} ({'–º' if gender=='male' else '–∂'})\n–ì–æ—Ä–æ–¥: {city}\n–ü–æ–¥–∑–µ–º–µ–ª—å–µ: {theme}"}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return (f"{name} –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑–∞–¥–∏ {city}. –¢—Ä–æ–ø–∞ –∫ ¬´{theme}¬ª —É—Ö–æ–¥–∏—Ç –≤ —Å—É–º—Ä–∞–∫ ‚Äî –æ–Ω –∏–¥—ë—Ç –æ–¥–∏–Ω –∏ –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —Ç–µ–º–Ω–æ—Ç–µ."
                if gender == "male" else
                f"{name} –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑–∞–¥–∏ {city}. –¢—Ä–æ–ø–∞ –∫ ¬´{theme}¬ª —É—Ö–æ–¥–∏—Ç –≤ —Å—É–º—Ä–∞–∫ ‚Äî –æ–Ω–∞ –∏–¥—ë—Ç –æ–¥–Ω–∞ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞ –∫ —Ç–µ–º–Ω–æ—Ç–µ.")

async def generate_travel_event(city: str, name: str, gender: str) -> tuple[str, Dict[str, int]]:
    """
    –í–µ—Ä–Ω—ë—Ç (–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, {'hp':¬±N,'gold':¬±N}).
    –§–æ—Ä–º–∞—Ç–∏–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≥–µ—Ä–æ—è. –í–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–∏—à–µ–º —Å—É—Ö–∏–µ —Ü–∏—Ñ—Ä—ã ‚Äî –Ω–∏–∂–µ –¥–æ–±–∞–≤–∏–º —Å–≤–æ–¥–∫—É.
    """
    if not USE_OPENAI or oai_client is None:
        if d(100) <= 40:
            heal = d(6)+2
            t = (f"‚ú® –ü–æ –¥–æ—Ä–æ–≥–µ {name} –Ω–∞—Ö–æ–¥–∏—Ç —á–∏—Å—Ç—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –æ—â—É—â–∞–µ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –≤–æ–¥—ã ‚Äî —Å–∏–ª—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.")
            return t, {"hp": heal}
        if d(100) <= 50:
            loss = d(12)+6
            t = (f"ü™§ –ë–∞–Ω–¥–∏—Ç—ã –≤—ã–º–æ–≥–∞—é—Ç –ø–ª–∞—Ç—É –∑–∞ ¬´–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å¬ª. –ü—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è —Å —á–∞—Å—Ç—å—é –º–æ–Ω–µ—Ç.")
            return t, {"gold": -loss}
        gain = d(10)+5
        t = (f"üß∫ –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü –¥–µ–ª–∏—Ç—Å—è –ø—Ä–æ–≤–∏–∑–∏–µ–π –∏ –º–µ–ª–∫–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ ‚Äî –¥–æ—Ä–æ–≥–∞ –∫–∞–∂–µ—Ç—Å—è –ª–µ–≥—á–µ.")
        return t, {"gold": gain}
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.95,
            max_tokens=240,
            messages=[
                {"role": "system", "content": (
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ—Ä–æ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –û–î–ò–ù–û–ö–û–ì–û –≥–µ—Ä–æ—è (2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å —É–º–µ—Å—Ç–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏. "
                    "–ë–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–µ—Ä–æ–π. –í –∫–æ–Ω—Ü–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–≥–æ: "
                    "EFFECT: HP=+N/HP=-N –∏–ª–∏ GOLD=+N/GOLD=-N (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä)."
                )},
                {"role": "user", "content": f"–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {city}\n–ì–µ—Ä–æ–π: {name} ({'–º' if gender=='male' else '–∂'})"}
            ],
        )
        text = resp.choices[0].message.content.strip()
        eff = {"hp": 0, "gold": 0}
        import re
        m = re.search(r"EFFECT:\s*(HP|GOLD)\s*=\s*([+-]?\d+)", text, re.I)
        if m:
            typ = m.group(1).upper()
            val = int(m.group(2))
            if typ == "HP":
                eff["hp"] = val
            else:
                eff["gold"] = val
            text = re.sub(r"EFFECT:.*", "", text, flags=re.I).strip()
        return text, eff
    except Exception:
        gain = d(8)+3
        t = (f"üß∫ –ü–æ –æ–±–æ—á–∏–Ω–µ –ø—É—Ç–∏ {name} –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –∫–æ—à–µ–ª—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å–∫—É. "
             f"–°–æ–≤–µ—Å—Ç—å –≤–µ–ª–∏—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ —Ç—Ä—É–¥—ã –ø—É—Ç–Ω–∏–∫–∞.")
        return t, {"gold": gain}

async def generate_dungeon_intro(theme: str) -> str:
    if not USE_OPENAI or oai_client is None:
        return (f"üè∞ –£ –≤—Ö–æ–¥–∞ –≤ ¬´{theme}¬ª —Ç—å–º–∞ —à–µ–≤–µ–ª–∏—Ç—Å—è, –∫–∞–∫ –∂–∏–≤–∞—è. –ö–∞–º–µ–Ω—å —Ö–æ–ª–æ–¥–µ–Ω, –∏ –≤–æ–∑–¥—É—Ö —Ç—è–≥—É—á.")
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=150,
            messages=[
                {"role": "system", "content": (
                    "–û–ø–∏—à–∏ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —É –≤—Ö–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ. –ë–µ–∑ Markdown."
                )},
                {"role": "user", "content": f"–ü–æ–¥–∑–µ–º–µ–ª—å–µ: {theme}"}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return (f"–ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ ¬´{theme}¬ª –¥–∞–∂–µ –ø–ª–∞–º—è —Ñ–æ–Ω–∞—Ä—è –¥—Ä–æ–∂–∏—Ç ‚Äî —Ç—å–º–∞ –±—É–¥—Ç–æ –≤—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–∏—à–µ–ª—å—Ü–∞.")

async def generate_room_lore(theme: str, room_num: int) -> str:
    if not USE_OPENAI or oai_client is None:
        return "–í –∫–æ–º–Ω–∞—Ç–µ –ø—ã–ª—å, –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –∫–æ–≥—Ç–µ–π –Ω–∞ —Å—Ç–µ–Ω–∞—Ö –∏ –¥—Ä–µ–≤–Ω–∏–µ –ø–∞—É—Ç–∏–Ω—ã."
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=160,
            messages=[
                {"role": "system", "content": (
                    "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–Ω–∞—Ç—ã –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ: –¥–µ—Ç–∞–ª–∏, –∑–∞–ø–∞—Ö–∏, –∑–≤—É–∫–∏. –ë–µ–∑ Markdown."
                )},
                {"role": "user", "content": f"–ü–æ–¥–∑–µ–º–µ–ª—å–µ: {theme}\n–ö–æ–º–Ω–∞—Ç–∞: {room_num}"}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return "–ö–æ–º–Ω–∞—Ç–∞ —Å—ã—Ä–∞—è –∏ –∑–∞—Ç—Ö–ª–∞—è; –≤ —É–≥–ª–∞—Ö ‚Äî —Ç—ë–º–Ω—ã–µ –ø—è—Ç–Ω–∞ –∏ —Å—Ç–∞—Ä–∏–Ω–Ω—ã–µ —â–µ—Ä–±–∞—Ç—ã–µ –∫–∞–º–Ω–∏."

async def generate_search_result() -> str:
    if not USE_OPENAI or oai_client is None:
        return "–û—Å–º–∞—Ç—Ä–∏–≤–∞—è –Ω–∏—à–∏ –∏ —Ç—Ä–µ—â–∏–Ω—ã, —Ç—ã –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å ‚Äî –ª–∏—à—å –ø—ã–ª—å –∏ –æ—Ç–±–∏—Ç—É—é –≥–≤–æ–∑–¥—å."
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=140,
            messages=[
                {"role": "system", "content": (
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã: –ª–∏–±–æ –Ω–∞—Ö–æ–¥–∫–∞, –ª–∏–±–æ –ø—É—Å—Ç–æ. "
                    "1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ Markdown."
                )},
                {"role": "user", "content": "–§—ç–Ω—Ç–µ–∑–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞."}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return "–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –¥–∞–≤–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ–¥–∏–ª‚Ä¶ –ù–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ –Ω–µ –≤–∏–¥–Ω–æ."

async def generate_camp_text(theme: str, name: str, gender: str) -> str:
    if not USE_OPENAI or oai_client is None:
        return f"üî• {name} —Ä–∞–∑–≤–æ–¥–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π –æ–≥–æ–Ω—å –∏, –ø—Ä–∏–∫—Ä—ã–≤—à–∏—Å—å –ø–ª–∞—â–æ–º, –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, —Å–ª—É—à–∞—è –≥—É–ª –≥–ª—É–±–∏–Ω."
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=140,
            messages=[
                {"role": "system", "content": (
                    "–û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ü–µ–Ω—É –ø—Ä–∏–≤–∞–ª–∞ –û–î–ò–ù–û–ö–û–ì–û –≥–µ—Ä–æ—è –≤ –º—Ä–∞—á–Ω–æ–º –ø–æ–¥–∑–µ–º–µ–ª—å–µ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ë–µ–∑ Markdown."
                )},
                {"role": "user", "content": f"–ì–µ—Ä–æ–π: {name} ({'–º' if gender=='male' else '–∂'})\n–ü–æ–¥–∑–µ–º–µ–ª—å–µ: {theme}"}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return f"üî• {name} –¥–µ–ª–∞–µ—Ç –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã –∏ —Å–ª—É—à–∞–µ—Ç, –∫–∞–∫ —Ç–∏—à–∏–Ω–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è —Ä–∞—Å–ø–æ–ª–∑–∞–µ—Ç—Å—è –ø–æ –∫–∞–º–Ω—è–º."

async def generate_enemy_reaction(enemy_name: str) -> str:
    if not USE_OPENAI or oai_client is None:
        return f"{enemy_name} –æ—Ç—à–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ —Ä—ã—á–∏—Ç."
    try:
        resp = await oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.9,
            max_tokens=80,
            messages=[
                {"role": "system", "content": "–ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –º–æ–Ω—Å—Ç—Ä–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ). –ë–µ–∑ Markdown."},
                {"role": "user", "content": f"–ú–æ–Ω—Å—Ç—Ä: {enemy_name}"}
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return f"{enemy_name} —Å–æ–¥—Ä–æ–≥–∞–µ—Ç—Å—è, —Ç–µ—Ä—è—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ."

# ---------- –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ ----------

@router.message(F.text == "üï≥Ô∏è –ü–æ–¥–∑–µ–º–µ–ª—å—è")
async def dng_menu(message: types.Message, state: FSMContext):
    p = get_player(message.from_user.id)
    names = theme_names_from_story(p.world_story)
    await state.update_data(dng_themes=names)
    await message.answer("–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:", reply_markup=dungeon_pick_kb(names))

@router.callback_query(F.data == "dng_back_city")
async def dng_back_city(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    from app.features.city import go_city
    await go_city(cb.message)

@router.callback_query(F.data.regexp(r"^dng_pick_(\d+)$"))
async def dng_pick(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    idx = int(cb.data.split("_")[-1]) - 1
    themes = data.get("dng_themes", [])
    if not (0 <= idx < len(themes)):
        await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", reply_markup=back_to_city_kb())
        return
    theme = themes[idx]
    p = get_player(cb.from_user.id)

    # init
    st = DungeonState(active=True, theme=theme, floor=1, room=0, found_exit=False, camped_in_room=False,
                      in_combat=False, enemy=None, turn="player", player_defending=False)
    _save_dng(p.user_id, st)
    _reset_ability_charges(p)

    # 1) –º–∞—Ä–∫–µ—Ä + –¥–æ—Ä–æ–≥–∞
    travel = await generate_travel_text(p.city_name, theme, p.name, p.gender)
    await cb.message.answer(f"üö∂ –¢—ã –ø–æ–∫–∏–¥–∞–µ—à—å {p.city_name} –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ ¬´{theme}¬ª.")
    await cb.message.answer(travel)

    # 2) –¥–æ—Ä–æ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    evt_text, eff = await generate_travel_event(p.city_name, p.name, p.gender)
    hp_delta = eff.get("hp", 0)
    gold_delta = eff.get("gold", 0)
    changed = []
    if hp_delta:
        p.hp = max(0, min(p.max_hp, p.hp + hp_delta))
        changed.append(f"‚ù§Ô∏è HP {'+' if hp_delta>0 else ''}{hp_delta} ‚Üí {p.hp}/{p.max_hp}")
    if gold_delta:
        p.gold = max(0, p.gold + gold_delta)
        changed.append(f"üëõ –ó–æ–ª–æ—Ç–æ {'+' if gold_delta>0 else ''}{gold_delta} ‚Üí {p.gold}")
    save_player(p)
    await cb.message.answer(evt_text + (("\n" + " | ".join(changed)) if changed else ""))

    # 3) –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É –≤—Ö–æ–¥–∞
    intro = await generate_dungeon_intro(theme)
    await cb.message.answer(intro)

    # 4) –ø–µ—Ä–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞
    await _enter_next_room(cb.message)

# ---------- –ö–æ–º–Ω–∞—Ç—ã ----------

async def _enter_next_room(message: types.Message):
    p = get_player(message.from_user.id)
    st = _get_dng(p.user_id)
    if not st.active:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.")
        return

    st.room += 1
    st.camped_in_room = False
    st.found_exit = False

    # —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥ –∑–∞—Ä–∞–Ω–µ–µ
    if st.room < MAX_ROOMS_PER_FLOOR and d(100) <= 18:
        st.found_exit = True

    # –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
    lore = await generate_room_lore(st.theme, st.room)
    _save_dng(p.user_id, st)
    await message.answer(_room_text(st))
    await message.answer(lore, reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit))

@router.callback_query(F.data == "dng_search")
async def dng_search(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    # –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    text = await generate_search_result()
    await cb.message.answer(text)

    # —Å–ª—É—á–∞–π–Ω–∞—è –Ω–∞—Ö–æ–¥–∫–∞ (—Å —à–∞–Ω—Å–æ–º)
    if d(100) <= 45:
        # –∑–æ–ª–æ—Ç–æ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç
        if d(100) <= 55:
            gold = d(12)+4
            p.gold += gold
            save_player(p)
            await cb.message.answer(f"üí∞ –ù–∞–π–¥–µ–Ω–æ –∑–æ–ª–æ—Ç–æ: +{gold}. üëõ –ò—Ç–æ–≥–æ: {p.gold}")
        else:
            found = random.choice([
                ("–ü—Ä–æ–≤–∏–∞–Ω—Ç", "consumable", None),
                ("–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", "camp", None),
                ("–ö–∏–Ω–∂–∞–ª", "weapon", None),
                ("–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "armor", "leather"),
                ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö", "weapon", "robe"),
                ("–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞", "consumable", None),
                ("–°–∞–º–æ—Ü–≤–µ—Ç", "consumable", None),
            ])
            name, kind, material = found
            p.inventory[name] = p.inventory.get(name, 0) + 1
            save_player(p)
            await cb.message.answer(f"üéÅ –ù–∞–π–¥–µ–Ω–æ: {decorate_item_name(name, kind, material)} √ó1")
    else:
        await cb.message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ‚Ä¶")

    await cb.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit))

@router.callback_query(F.data == "dng_next")
async def dng_next(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    # –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    trans_text = ("–¢—ã —É–≥–ª—É–±–ª—è–µ—à—å—Å—è –¥–∞–ª—å—à–µ, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—è—Å—å –∫ —à–æ—Ä–æ—Ö–∞–º –∏ –≥—É–ª—É –¥—Ä–µ–≤–Ω–∏—Ö –∑–∞–ª–æ–≤.")
    if USE_OPENAI and oai_client is not None:
        try:
            resp = await oai_client.chat.completions.create(
                model="gpt-4o-mini",
                temperature=0.9,
                max_tokens=120,
                messages=[
                    {"role": "system", "content": "–û–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –≥–µ—Ä–æ–π –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ. –ë–µ–∑ Markdown."},
                    {"role": "user", "content": f"–ì–µ—Ä–æ–π: {p.name} ({'–º' if p.gender=='male' else '–∂'}). –ü–æ–¥–∑–µ–º–µ–ª—å–µ: {st.theme}."}
                ],
            )
            trans_text = resp.choices[0].message.content.strip()
        except Exception:
            pass
    await cb.message.answer(trans_text)
    await _maybe_spawn_encounter(cb.message)

async def _maybe_spawn_encounter(message: types.Message):
    p = get_player(message.from_user.id)
    st = _get_dng(p.user_id)

    st.found_exit = st.found_exit or (st.room < MAX_ROOMS_PER_FLOOR and d(100) <= 18)
    # 45% –º–æ–Ω—Å—Ç—Ä, 20% –ª–æ–≤—É—à–∫–∞, 15% —Å–æ–∫—Ä–æ–≤–∏—â–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—É—Å—Ç–æ
    roll_kind = d(100)

    if roll_kind <= 45:
        m = roll_monster(st.theme, depth=(st.floor-1)*MAX_ROOMS_PER_FLOOR + st.room)
        st.in_combat = True
        st.turn = random.choice(["player", "enemy"])
        st.player_defending = False
        st.enemy = {
            "name": m.name, "emoji": m.emoji, "hp": m.hp, "ac": m.ac,
            "attack": m.attack, "to_hit": m.to_hit, "xp": m.xp, "level": m.level
        }
        _save_dng(p.user_id, st)

        # –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        desc = f"{st.enemy['emoji']} –ò–∑ —Ç–µ–Ω–∏ –≤—ã—Å—Ç—É–ø–∞–µ—Ç {st.enemy['name']}."
        if USE_OPENAI and oai_client is not None:
            try:
                resp = await oai_client.chat.completions.create(
                    model="gpt-4o-mini",
                    temperature=0.9,
                    max_tokens=120,
                    messages=[
                        {"role": "system", "content": "–û–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –º–æ–Ω—Å—Ç—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≥–µ—Ä–æ–µ–º. –ë–µ–∑ Markdown."},
                        {"role": "user", "content": f"–ú–æ–Ω—Å—Ç—Ä: {st.enemy['name']}. –ü–æ–¥–∑–µ–º–µ–ª—å–µ: {st.theme}."}
                    ],
                )
                desc = resp.choices[0].message.content.strip()
            except Exception:
                pass

        await message.answer(
            f"{_room_text(st)}\n\n{desc}\nHP –≤—Ä–∞–≥–∞: {st.enemy['hp']}  | AC: {st.enemy['ac']}\n"
            f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: <b>{'–≥–µ—Ä–æ–π' if st.turn=='player' else '–≤—Ä–∞–≥'}</b>.",
            reply_markup=combat_actions_kb(has_skills=bool(p.ability_charges))
        )
        if st.turn == "enemy":
            await _enemy_turn(message)
        return

    elif roll_kind <= 65:
        dc = 12 + (st.floor//2)
        mod = (p.dexterity - 10)//2
        r, ok, crit = check_dc(mod, dc)
        dmg = roll("1d6+1")
        await message.answer(_room_text(st))
        if ok:
            await message.answer(f"ü™§ –õ–æ–≤—É—à–∫–∞! –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–æ–≤–∫–æ—Å—Ç–∏ d20({r}){' –ö–†–ò–¢!' if crit else ''} ‚Äî –£–°–ü–ï–•. –£—Ä–æ–Ω–∞ –Ω–µ—Ç.",
                                 reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit))
        else:
            p.hp = max(0, p.hp - dmg)
            save_player(p)
            await message.answer(
                f"ü™§ –õ–æ–≤—É—à–∫–∞! –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–æ–≤–∫–æ—Å—Ç–∏ d20({r}){' –ö–†–ò–¢.–ü–†–û–í–ê–õ!' if crit else ''} ‚Äî –ü–†–û–í–ê–õ. "
                f"–ü–æ–ª—É—á–µ–Ω–æ {dmg} —É—Ä–æ–Ω–∞. ‚ù§Ô∏è {p.hp}/{p.max_hp}",
                reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit)
            )
        return

    elif roll_kind <= 80:
        gold = d(12)+4
        p.gold += gold
        loot_line = ""
        if d(100) <= 30:
            found = random.choice([
                ("–ü—Ä–æ–≤–∏–∞–Ω—Ç", "consumable", None),
                ("–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", "camp", None),
                ("–ö–∏–Ω–∂–∞–ª", "weapon", None),
                ("–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "armor", "leather"),
                ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö", "weapon", "robe"),
            ])
            name, kind, material = found
            p.inventory[name] = p.inventory.get(name, 0) + 1
            loot_line = f"\nüéÅ –ù–∞–π–¥–µ–Ω–æ: {decorate_item_name(name, kind, material)} √ó1"
        save_player(p)
        await message.answer(_room_text(st))
        await message.answer(f"üí∞ –°–æ–∫—Ä–æ–≤–∏—â–∞! –ó–æ–ª–æ—Ç–æ +{gold}.{loot_line}",
                             reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit))
        return

    else:
        await message.answer(_room_text(st))
        await message.answer("–ö–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞‚Ä¶", reply_markup=room_actions_kb(can_camp=not st.camped_in_room, has_exit=st.found_exit))
        return

@router.callback_query(F.data == "dng_camp")
async def dng_camp(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    if st.camped_in_room:
        await cb.message.answer("–ó–¥–µ—Å—å —É–∂–µ –±—ã–ª –ø—Ä–∏–≤–∞–ª.")
        return
    if p.inventory.get("–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞", 0) <= 0:
        await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–±–æ—Ä–∞ –¥–ª—è –∫–æ—Å—Ç—Ä–∞.")
        return

    # –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤–∞–ª–∞
    camp_text = await generate_camp_text(st.theme, p.name, p.gender)
    await cb.message.answer(camp_text)

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: HP + 50% –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ (–æ–∫—Ä—É–≥–ª–∏–º –≤–Ω–∏–∑, –º–∏–Ω–∏–º—É–º 1), –∑–∞—Ä—è–¥—ã +1 (–Ω–µ –≤—ã—à–µ –º–∞–∫—Å.)
    heal = max(1, (p.max_hp - p.hp)//2)
    p.hp = min(p.max_hp, p.hp + heal)
    from app.features.character import ability_uses_for_level
    charges = p.__dict__.get("ability_charges", {})
    changes = [f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {p.hp}/{p.max_hp} (+{heal})"]
    for key, cur in list(charges.items()):
        lvl = p.abilities_known.get(key, 1)
        mx = ability_uses_for_level(key, lvl, p.class_key)
        if mx > 0:
            new = min(mx, cur + 1)
            if new != cur:
                charges[key] = new
                meta = p.ability_meta.get(key, {"emoji":"‚ú®","title":key})
                changes.append(f"{meta['emoji']} {meta['title']}: {new}/{mx} (+1)")
    p.ability_charges = charges

    # —Ç—Ä–∞—Ç–∏–º –Ω–∞–±–æ—Ä
    p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"] -= 1
    if p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"] <= 0:
        del p.inventory["–ù–∞–±–æ—Ä –¥–ª—è –∫–æ—Å—Ç—Ä–∞"]
    save_player(p)

    st.camped_in_room = True
    _save_dng(p.user_id, st)

    await cb.message.answer("\n".join(changes),
                            reply_markup=room_actions_kb(can_camp=False, has_exit=st.found_exit))

@router.callback_query(F.data == "dng_escape")
async def dng_escape(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    st = _get_dng(cb.from_user.id)
    if not st.found_exit:
        await cb.message.answer("–í—ã—Ö–æ–¥–∞ —Ä—è–¥–æ–º –Ω–µ—Ç.")
        return
    await cb.message.answer("–ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥?", reply_markup=confirm_leave_dungeon_kb())

@router.callback_query(F.data.in_(["dng_leave_yes", "dng_town_confirm"]))
async def dng_leave_yes(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    p.dungeon = DungeonState().__dict__
    save_player(p)
    clear_market_for_player(p.user_id)  # –æ–±–Ω–æ–≤–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤ –≥–æ—Ä–æ–¥–µ

    from app.features.city import go_city
    await cb.message.answer("–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –≥–æ—Ä–æ–¥. –¢–æ—Ä–≥–æ–≤—Ü—ã —Å–º–µ–Ω–∏–ª–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.")
    await go_city(cb.message)

@router.callback_query(F.data == "dng_leave_no")
async def dng_leave_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")

# ---------- –ë–æ–π ----------

def _player_ac(p) -> int:
    ac = 10 + max(0, p.endurance // 3)
    arm = (p.equipment or {}).get("armor")
    if arm:
        low = arm.lower()
        if any(x in low for x in ["–∫–æ–∂–∞–Ω", "–ª–µ–≥", "–ª—ë–≥"]):
            ac += 1
        elif any(x in low for x in ["–ª–∞—Ç—ã", "—Ç—è–∂", "–∫–æ–ª—å—á—É–≥", "–ø–∞–Ω—Ü–∏—Ä"]):
            ac += 2
    return ac

def _player_weapon_dmg(p) -> str:
    w = (p.equipment or {}).get("weapon") or ""
    low = w.lower()
    if "–ª—É–∫" in low:
        base = "1d8"; mod = (p.dexterity - 10)//2
    elif any(x in low for x in ["–ø–æ—Å–æ—Ö","–∂–µ–∑–ª"]):
        base = "1d8"; mod = (p.intellect - 10)//2
    elif any(x in low for x in ["–±—É–ª–∞–≤","–º–æ–ª–æ—Ç"]):
        base = "1d8"; mod = (p.strength - 10)//2
    elif any(x in low for x in ["–∫–∏–Ω–∂–∞–ª","–Ω–æ–∂"]):
        base = "1d6"; mod = (p.dexterity - 10)//2
    elif any(x in low for x in ["—Ç–æ–ø–æ—Ä"]):
        base = "1d10"; mod = (p.strength - 10)//2
    else:
        base = "1d8"; mod = (p.strength - 10)//2
    mod = max(0, mod)
    return f"{base}+{mod}" if mod > 0 else base

def _to_hit_mod(p) -> int:
    w = (p.equipment or {}).get("weapon") or ""
    low = w.lower()
    if "–ª—É–∫" in low or "–∞—Ä–±–∞–ª–µ—Ç" in low:
        return max(0, (p.dexterity - 10)//2)
    if any(x in low for x in ["–ø–æ—Å–æ—Ö","–∂–µ–∑–ª"]):
        return max(0, (p.intellect - 10)//2)
    if any(x in low for x in ["–∫–∏–Ω–∂–∞–ª","–Ω–æ–∂"]):
        return max(0, (p.dexterity - 10)//2)
    return max(0, (p.strength - 10)//2)

async def _enemy_turn(message: types.Message):
    p = get_player(message.from_user.id)
    st = _get_dng(p.user_id)
    if not st.in_combat or not st.enemy:
        return

    r = d(20)
    to_hit = st.enemy["to_hit"]
    ac = _player_ac(p)
    # —É—á—Ç—ë–º –∑–∞—â–∏—Ç—É –∏–≥—Ä–æ–∫–∞
    if st.player_defending:
        ac += 2

    total = r + to_hit
    log = f"–•–æ–¥ –≤—Ä–∞–≥–∞: d20={r}+{to_hit} –ø—Ä–æ—Ç–∏–≤ —Ç–≤–æ–µ–≥–æ AC={ac} ‚Üí "
    if r == 20 or total >= ac:
        dmg = roll(st.enemy["attack"])
        p.hp = max(0, p.hp - dmg)
        save_player(p)
        log += f"–ü–û–ü–ê–î–ê–ù–ò–ï! –£—Ä–æ–Ω {dmg}. ‚ù§Ô∏è {p.hp}/{p.max_hp}"
    else:
        log += "–ø—Ä–æ–º–∞—Ö."

    st.turn = "player"
    st.player_defending = False  # –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 1 ¬´–≤—Ä–∞–∂–∏–π¬ª —Ö–æ–¥
    _save_dng(p.user_id, st)

    if p.hp <= 0:
        await message.answer(log)
        await _player_death(message)
    else:
        await message.answer(log, reply_markup=combat_actions_kb(has_skills=bool(p.ability_charges)))

async def _player_death(message: types.Message):
    p = get_player(message.from_user.id)
    lost_gold = min(p.gold, max(5, p.gold // 3))
    p.gold -= lost_gold
    lost_exp = max(0, p.exp // 5)
    p.exp = max(0, p.exp - lost_exp)
    p.inventory = {}
    p.dungeon = DungeonState().__dict__
    save_player(p)

    await message.answer(
        f"‚ò†Ô∏è –¢—ã –ø–∞–ª –≤ –≥–ª—É–±–∏–Ω–∞—Ö. –ü–æ—Ç–µ—Ä—è–Ω–æ {lost_gold} –∑–æ–ª. –∏ {lost_exp} –æ–ø—ã—Ç–∞.\n"
        "–¢–µ–±—è –Ω–∞—à–ª–∏ –∂–∏—Ç–µ–ª–∏ –∏ –¥–æ—Ç–∞—â–∏–ª–∏ –¥–æ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –≤–æ—Ä–æ—Ç‚Ä¶"
    )
    from app.features.city import go_city
    await go_city(message)

@router.callback_query(F.data == "cmb_attack")
async def cmb_attack(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    if not st.in_combat or not st.enemy:
        await cb.message.answer("–°–µ–π—á–∞—Å –Ω–µ —Å –∫–µ–º —Å—Ä–∞–∂–∞—Ç—å—Å—è.")
        return
    r = d(20)
    mod = _to_hit_mod(p)
    total = r + mod
    log = f"–¢—ã –∞—Ç–∞–∫—É–µ—à—å: d20={r}+{mod} ‚Üí "
    if r == 1:
        log += "–∫—Ä–∏—Ç.–ø—Ä–æ–≤–∞–ª ‚Äî –ø—Ä–æ–º–∞—Ö."
        st.turn = "enemy"
        _save_dng(p.user_id, st)
        await cb.message.answer(log)
        await _enemy_turn(cb.message)
        return
    if r == 20 or total >= st.enemy["ac"]:
        dmg = roll(_player_weapon_dmg(p))
        if r == 20:
            dmg += roll("1d6")
        st.enemy["hp"] = max(0, st.enemy["hp"] - dmg)
        react = await generate_enemy_reaction(st.enemy["name"])
        log += f"–ü–û–ü–ê–î–ê–ù–ò–ï! –£—Ä–æ–Ω {dmg}. –í—Ä–∞–≥ HP: {st.enemy['hp']}\n{react}"
    else:
        log += "–ø—Ä–æ–º–∞—Ö."

    if st.enemy["hp"] <= 0:
        xp = st.enemy["xp"]
        p.exp += xp
        gold = d(10)+3
        p.gold += gold
        save_player(p)
        st.in_combat = False
        st.enemy = None
        st.player_defending = False
        _save_dng(p.user_id, st)
        await cb.message.answer(log)
        await cb.message.answer(f"üèÜ –ü–æ–±–µ–¥–∞! –û–ø—ã—Ç +{xp}, –∑–æ–ª–æ—Ç–æ +{gold}.")
        await cb.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=room_actions_kb(can_camp=True, has_exit=True))
    else:
        st.turn = "enemy"
        _save_dng(p.user_id, st)
        await cb.message.answer(log)
        await _enemy_turn(cb.message)

@router.callback_query(F.data == "cmb_defend")
async def cmb_defend(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    if not st.in_combat or not st.enemy:
        await cb.message.answer("–°–µ–π—á–∞—Å –Ω–µ —Å –∫–µ–º —Å—Ä–∞–∂–∞—Ç—å—Å—è.")
        return
    st.player_defending = True
    st.turn = "enemy"
    _save_dng(p.user_id, st)
    await cb.message.answer("üõ°Ô∏è –¢—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –∑–∞—â–∏—Ç–Ω—É—é —Å—Ç–æ–π–∫—É (AC +2 –¥–æ –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞).")
    await _enemy_turn(cb.message)

@router.callback_query(F.data == "cmb_flee")
async def cmb_flee(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    p = get_player(cb.from_user.id)
    st = _get_dng(p.user_id)
    if not st.in_combat:
        await cb.message.answer("–ù–µ–∫—É–¥–∞ –±–µ–∂–∞—Ç—å.")
        return
    dc = 17
    mod = (p.dexterity - 10)//2
    r, ok, crit = check_dc(mod, dc)
    if ok:
        st.in_combat = False
        st.enemy = None
        st.player_defending = False
        _save_dng(p.user_id, st)
        await cb.message.answer(f"ü•æ –ë—Ä–æ—Å–æ–∫ d20={r}{' –ö–†–ò–¢!' if crit else ''} ‚Äî –ø–æ–±–µ–≥ –£–î–ê–õ–°–Ø. –¢—ã —É—Å–∫–æ–ª—å–∑–Ω—É–ª.")
        await cb.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=room_actions_kb(can_camp=True, has_exit=st.found_exit))
    else:
        dmg = roll("1d6+2")
        p.hp = max(0, p.hp - dmg)
        save_player(p)
        await cb.message.answer(f"‚ùå –ë—Ä–æ—Å–æ–∫ d20={r}{' –ö–†–ò–¢.–ü–†–û–í–ê–õ!' if crit else ''} ‚Äî –Ω–µ—É–¥–∞—á–∞, –ø–æ–ª—É—á–∞–µ—à—å {dmg} —É—Ä–æ–Ω–∞. ‚ù§Ô∏è {p.hp}/{p.max_hp}")
        if p.hp <= 0:
            await _player_death(cb.message)
        else:
                    await _enemy_turn(cb.message)

        @router.callback_query(F.data == "cmb_back")
        async def cmb_back(cb: types.CallbackQuery, state: FSMContext):
            await cb.answer()
            p = get_player(cb.from_user.id)
            st = _get_dng(p.user_id)
            if not (st.in_combat and st.enemy):
                await cb.message.answer("–°–µ–π—á–∞—Å –Ω–µ —Å –∫–µ–º —Å—Ä–∞–∂–∞—Ç—å—Å—è.")
                return
            await cb.message.answer(
                f"{st.enemy['emoji']} {st.enemy['name']} –Ω–∞–≥–æ—Ç–æ–≤–µ.\n–¢–≤–æ–π —Ö–æ–¥.",
                reply_markup=combat_actions_kb(has_skills=bool(p.ability_charges))
            )

        @router.callback_query(F.data == "cmb_skills")
        async def cmb_skills(cb: types.CallbackQuery, state: FSMContext):
            await cb.answer()
            p = get_player(cb.from_user.id)
            st = _get_dng(p.user_id)
            if not (st.in_combat and st.enemy):
                await cb.message.answer("–°–µ–π—á–∞—Å –Ω–µ —Å –∫–µ–º —Å—Ä–∞–∂–∞—Ç—å—Å—è.")
                return

            charges: Dict[str, int] = p.__dict__.get("ability_charges", {})
            avail = [k for k, v in charges.items() if v > 0]
            if not avail:
                await cb.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—Ä—è–¥–æ–≤ —É–º–µ–Ω–∏–π.", reply_markup=combat_actions_kb(False))
                return

            # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ FSM
            await state.update_data(skill_keys=avail)

            # –°–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–∞—Ä—è–¥–∞–º–∏
            lines = ["–í—ã–±–µ—Ä–∏ —É–º–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º:"]
            for i, key in enumerate(avail, start=1):
                meta = p.ability_meta.get(key, {"emoji": "‚ú®", "title": key})
                uses = charges.get(key, 0)
                # –û–ø—Ä–µ–¥–µ–ª–∏–º –º–∞–∫—Å-–∑–∞—Ä—è–¥—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
                from app.features.character import ability_uses_for_level
                lvl = p.abilities_known.get(key, 1)
                mx = ability_uses_for_level(key, lvl, p.class_key)
                lines.append(f"{i}. {meta['emoji']} {meta['title']}: {uses}/{mx}")
            await cb.message.answer("\n".join(lines), reply_markup=skills_pick_kb(avail))

        @router.callback_query(F.data.regexp(r"^sk_(\d+)$"))
        async def cmb_skill_pick(cb: types.CallbackQuery, state: FSMContext):
            await cb.answer()
            p = get_player(cb.from_user.id)
            st = _get_dng(p.user_id)
            if not (st.in_combat and st.enemy):
                await cb.message.answer("–°–µ–π—á–∞—Å –Ω–µ —Å –∫–µ–º —Å—Ä–∞–∂–∞—Ç—å—Å—è.")
                return

            data = await state.get_data()
            keys: List[str] = data.get("skill_keys", [])
            idx = int(cb.data.split("_")[-1]) - 1
            if not (0 <= idx < len(keys)):
                await cb.message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
                return

            key = keys[idx]
            charges: Dict[str, int] = p.__dict__.get("ability_charges", {})
            cur = charges.get(key, 0)
            if cur <= 0:
                await cb.message.answer("–ó–∞—Ä—è–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.", reply_markup=combat_actions_kb(False))
                return

            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —É—Ä–æ–Ω–∞ —É–º–µ–Ω–∏—è–º–∏:
            # –º–∞–≥–∏—á–µ—Å–∫–∏–µ ‚Äî INT, —Å—Ç—Ä–µ–ª–∫–æ–≤—ã–µ ‚Äî DEX, –ø—Ä–æ—á–µ–µ ‚Äî STR
            # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º INT –∫–∞–∫ –±–∞–∑—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ), –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –∫–ª—é—á–∞–º
            to_hit = max(0, (p.intellect - 10) // 2)
            r = d(20)
            total = r + to_hit
            log = f"‚ú® –£–º–µ–Ω–∏–µ: d20={r}+{to_hit} ‚Üí "

            if r == 1:
                log += "–∫—Ä–∏—Ç.–ø—Ä–æ–≤–∞–ª ‚Äî –ø—Ä–æ–º–∞—Ö."
                st.turn = "enemy"
                _save_dng(p.user_id, st)
                await cb.message.answer(log)
                await _enemy_turn(cb.message)
                return

            if r == 20 or total >= st.enemy["ac"]:
                # –ë–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
                dmg = roll("1d8") + max(0, (p.intellect - 10)//2)
                if r == 20:
                    dmg += roll("1d6")
                st.enemy["hp"] = max(0, st.enemy["hp"] - dmg)

                # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—Ä—è–¥
                charges[key] = cur - 1
                p.ability_charges = charges
                save_player(p)

                react = await generate_enemy_reaction(st.enemy["name"])
                log += f"–ü–û–ü–ê–î–ê–ù–ò–ï! –£—Ä–æ–Ω {dmg}. –í—Ä–∞–≥ HP: {st.enemy['hp']}\n{react}"
            else:
                log += "–ø—Ä–æ–º–∞—Ö."

            if st.enemy["hp"] <= 0:
                xp = st.enemy["xp"]
                p.exp += xp
                gold = d(10)+3
                p.gold += gold
                save_player(p)

                st.in_combat = False
                st.enemy = None
                st.player_defending = False
                _save_dng(p.user_id, st)

                await cb.message.answer(log)
                await cb.message.answer(f"üèÜ –ü–æ–±–µ–¥–∞! –û–ø—ã—Ç +{xp}, –∑–æ–ª–æ—Ç–æ +{gold}.")
                await cb.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=room_actions_kb(can_camp=True, has_exit=True))
            else:
                st.turn = "enemy"
                _save_dng(p.user_id, st)
                await cb.message.answer(log)
                await _enemy_turn(cb.message)
