# -*- coding: utf-8 -*-
# app/features/city.py
from __future__ import annotations

from aiogram import types, Router, F

from app.core.storage import get_player
from app.ui.keyboards import city_menu_kb

router = Router(name="city")

async def go_city(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥—Å–∫–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    user_id = message.from_user.id
    p = get_player(user_id)
    if not p:
        await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–±–µ—Ä–∏ /start")
        return

    city = p.city_name or "–ì–æ—Ä–æ–¥"
    await message.answer(f"üèô <b>{city}</b>\n–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è?", reply_markup=city_menu_kb())

# ---------- –ö–ù–û–ü–ö–ò –ì–û–†–û–î–ê ----------

@router.message(F.text.contains("–°—é–∂–µ—Ç"))
async def story_btn(message: types.Message):
    await message.answer("<i>üìñ –°—é–∂–µ—Ç: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>")
    await go_city(message)

@router.message(F.text.contains("–ü–µ—Ä—Å–æ–Ω–∞–∂"))
async def character_btn(message: types.Message):
    p = get_player(message.from_user.id)
    if not p:
        await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–±–µ—Ä–∏ /start"); return
    eq = p.equipment or {}
    lines = [
        "üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂</b>",
        f"–ò–º—è: {p.name}",
        f"–ö–ª–∞—Å—Å: {p.class_label or p.class_key}",
        f"–£—Ä–æ–≤–µ–Ω—å: {getattr(p, 'level', 1)}",
        f"–ó–æ–ª–æ—Ç–æ: {p.gold}",
        f"HP: {p.hp}/{p.max_hp}",
        "",
        "‚öôÔ∏è <b>–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</b>",
        f"–û—Ä—É–∂–∏–µ: {eq.get('weapon') or '‚Äî'}",
        f"–ë—Ä–æ–Ω—è: {eq.get('armor') or '‚Äî'}",
    ]
    await message.answer("\n".join(lines), reply_markup=city_menu_kb())

@router.message(F.text.contains("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"))
async def inventory_btn(message: types.Message):
    p = get_player(message.from_user.id)
    if not p:
        await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–±–µ—Ä–∏ /start"); return
    inv = p.inventory or {}
    if not inv:
        await message.answer("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", reply_markup=city_menu_kb()); return
    lines = ["üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>"]
    for name, cnt in inv.items():
        lines.append(f"‚Ä¢ {name} √ó {cnt}")
    await message.answer("\n".join(lines), reply_markup=city_menu_kb())

@router.message(F.text.contains("–ó–∞–¥–∞–Ω–∏—è"))
async def quests_btn(message: types.Message):
    await message.answer("<i>üß≠ –ó–∞–¥–∞–Ω–∏—è: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>")
    await go_city(message)

@router.message(F.text.contains("–ü–æ–¥–∑–µ–º–µ–ª—å–µ"))
async def dungeon_btn(message: types.Message):
    await message.answer("<i>‚öîÔ∏è –ü–æ–¥–∑–µ–º–µ–ª—å–µ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>")
    await go_city(message)

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥¬ª
@router.message(F.text.contains("–ì–æ—Ä–æ–¥"))
async def back_to_city_legacy(message: types.Message):
    await go_city(message)
