# -*- coding: utf-8 -*-
# app/ui/keyboards.py
from __future__ import annotations

from typing import List

from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# ---------- –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ----------

def gender_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    rows = [
        [
            KeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞"),
            KeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞"),
        ]
    ]
    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )

def classes_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    rows = [
        [
            KeyboardButton(text="üó°Ô∏è –ú–µ—á–Ω–∏–∫"),
            KeyboardButton(text="‚ú® –ü–æ—Å–ª—É—à–Ω–∏–∫"),
        ],
        [
            KeyboardButton(text="üîÆ –ú–∞–≥"),
            KeyboardButton(text="üèπ –õ—É—á–Ω–∏–∫"),
        ],
        [
            KeyboardButton(text="üßæ –¢–æ—Ä–≥–æ–≤–µ—Ü"),
            KeyboardButton(text="üóùÔ∏è –í–æ—Ä"),
        ]
    ]
    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )

def confirm_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    rows = [
        [
            KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
            KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
        ]
    ]
    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä"
    )

# ---------- –ì–û–†–û–î (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ----------

def city_menu_kb() -> ReplyKeyboardMarkup:
    # –õ–µ–π–±–ª—ã –î–û–õ–ñ–ù–´ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    rows = [
        [
            KeyboardButton(text="üõí –†—ã–Ω–æ–∫"),
            KeyboardButton(text="üï≥Ô∏è –ü–æ–¥–∑–µ–º–µ–ª—å—è"),
        ],
        [
            KeyboardButton(text="üç∫ –¢–∞–≤–µ—Ä–Ω–∞"),
            KeyboardButton(text="üßç –ü–µ—Ä—Å–æ–Ω–∞–∂"),
        ],
        [
            KeyboardButton(text="üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        ],
    ]
    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="‚Ä¶"
    )

def back_to_city_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üèòÔ∏è –í –≥–æ—Ä–æ–¥")]],
        resize_keyboard=True
    )

# ---------- –ü–û–î–ó–ï–ú–ï–õ–¨–Ø (inline) ----------

def dungeon_pick_kb(names: List[str]) -> InlineKeyboardMarkup:
    rows = []
    for i, name in enumerate(names, start=1):
        rows.append([InlineKeyboardButton(text=f"{i}. {name}", callback_data=f"dng_pick_{i}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dng_back_city")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def room_actions_kb(*, can_camp: bool, has_exit: bool) -> InlineKeyboardMarkup:
    rows = []
    rows.append([InlineKeyboardButton(text="üîé –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", callback_data="dng_search")])
    if can_camp:
        rows.append([InlineKeyboardButton(text="üî• –ü—Ä–∏–≤–∞–ª", callback_data="dng_camp")])
    rows.append([InlineKeyboardButton(text="‚û°Ô∏è –ò–¥—Ç–∏ –¥–∞–ª—å—à–µ", callback_data="dng_next")])
    if has_exit:
        rows.append([InlineKeyboardButton(text="‚¨ÜÔ∏è –ö –≤—ã—Ö–æ–¥—É", callback_data="dng_escape")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_leave_dungeon_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–π—Ç–∏", callback_data="dng_leave_yes"),
            InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞—Ç—å—Å—è", callback_data="dng_leave_no"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –ë–û–ô (inline) ----------

def combat_actions_kb(has_skills: bool) -> InlineKeyboardMarkup:
    rows = []
    if has_skills:
        rows.append([InlineKeyboardButton(text="‚ú® –£–º–µ–Ω–∏—è", callback_data="cmb_skills")])
    rows.append([InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–∞", callback_data="cmb_attack")])
    rows.append([InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—Ç–∞", callback_data="cmb_defend")])
    rows.append([InlineKeyboardButton(text="ü•æ –°–±–µ–∂–∞—Ç—å", callback_data="cmb_flee")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def skills_pick_kb(keys: List[str]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, _ in enumerate(keys, start=1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"sk_{i}"))
        if len(row) == 4:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cmb_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)
