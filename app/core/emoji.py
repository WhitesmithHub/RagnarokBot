# -*- coding: utf-8 -*-
# app/core/emoji.py
from __future__ import annotations

def _weapon_emoji(name: str) -> str:
    n = name.lower()
    if any(x in n for x in ["–º–µ—á", "—Å–∞–±–ª", "–∫–ª–∏–Ω–æ–∫"]): return "üó°Ô∏è"
    if any(x in n for x in ["–ª—É–∫", "—Å—Ç—Ä–µ–ª"]): return "üèπ"
    if any(x in n for x in ["–±—É–ª–∞–≤", "–º–æ–ª–æ—Ç", "–∫—É–∑–Ω–µ—á"]): return "üî®"
    if any(x in n for x in ["—Ç–æ–ø–æ—Ä", "—Å–µ–∫–∏—Ä"]): return "ü™ì"
    if any(x in n for x in ["–∫–∏–Ω–∂–∞–ª", "–Ω–æ–∂", "–∫–∞—Ç–∞—Ä"]): return "üî™"
    if any(x in n for x in ["–ø–æ—Å–æ—Ö", "–∂–µ–∑–ª", "–∂–µ–∑–µ–ª"]): return "üç¢"  # –∫–∞–∫ –∏ –ø—Ä–æ—Å–∏–ª–∏ —Ä–∞–Ω–µ–µ
    if any(x in n for x in ["–∫–æ–ø—å", "–ø–∏–∫–∞"]): return "ü•¢"
    return "‚öîÔ∏è"

def _armor_emoji(material: str | None, name: str) -> str:
    n = (name or "").lower()
    if material == "leather" or "–∫–æ–∂–∞–Ω" in n: return "üß•"
    if material == "robe" or any(x in n for x in ["—Ä–æ–±", "—Ä—è—Å–∞", "–º–∞–Ω—Ç"]): return "üëò"
    return "üõ°Ô∏è"

def _misc_emoji(name: str) -> str:
    n = name.lower()
    # üî¥ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–≥–æ üç∑
    if "–∑–µ–ª—å–µ" in n or "–ª–µ—á–µ–Ω" in n or "potion" in n:
        return "üç∑"
    if any(x in n for x in ["–ø—Ä–æ–≤–∏–∞–Ω—Ç","–µ–¥–∞","–ø–∞—ë–∫","–ø–∞–π–æ–∫","–º—è—Å","—Ö–ª–µ–±"]): return "üçó"
    if any(x in n for x in ["–∫–æ—Å—Ç—Ä–∞","–∫–æ—Å—Ç—ë—Ä","–∫–æ—Å—Ç–µ—Ä","–∫—ç–º–ø","camp"]): return "üå≥"
    if any(x in n for x in ["–∫–∞–º–Ω","—Å–∞–º–æ—Ü–≤–µ—Ç","–¥—Ä–∞–≥–æ—Ü","—Ä—É–¥–∞","–∂–µ–ª–µ–∑–æ"]): return "üíé"
    return "üì¶"

def decorate_item_name(name: str, kind: str | None, material: str | None = None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '<emoji> <name>'.
    kind ‚àà {"weapon","armor","consumable","camp"} –ª–∏–±–æ None.
    material ‚àà {"leather","robe"} –ª–∏–±–æ None.
    """
    if kind == "weapon":
        e = _weapon_emoji(name)
    elif kind == "armor":
        e = _armor_emoji(material, name)
    elif kind == "camp":
        e = "üå≥"
    elif kind == "consumable":
        e = _misc_emoji(name)
    else:
        e = _misc_emoji(name)
    return f"{e} {name}"

# --- –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–µ–π–¥–∂–∏) ---
RARITY_ICONS = {
    "–û–±—ã—á–Ω—ã–π": "‚ö™",
    "–†–µ–¥–∫–∏–π": "üîµ",
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "üåü",
}

def rarity_badge(rarity: str) -> str:
    r = (rarity or "").strip()
    key = (
        "–û–±—ã—á–Ω—ã–π" if r.lower().startswith("–æ–±—ã—á") else
        "–†–µ–¥–∫–∏–π" if r.lower().startswith("—Ä–µ–¥–∫") else
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π" if r.lower().startswith("–ª–µ–≥–µ–Ω") else
        r
    )
    icon = RARITY_ICONS.get(key, "")
    return f"{icon} {key}" if icon else key
