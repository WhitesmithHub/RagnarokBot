# -*- coding: utf-8 -*-
# app/core/emoji.py
import re

# –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
WEAPON_EMOJI = {
    r"–º–µ—á|—Å–∞–±–ª—è|–∫–ª–∏–Ω–æ–∫|—Ä–∞–ø–∏—Ä–∞": "üó°Ô∏è",
    r"–ª—É–∫|–∞—Ä–±–∞–ª–µ—Ç": "üèπ",
    r"–ø–æ—Å–æ—Ö|–∂–µ–∑–ª|–∂–µ–∑–ª—ã|–∂–µ–∑–µ–ª—å|—Å—Ñ–µ—Ä–∞": "üç¢",   # –ø–æ –∑–∞–ø—Ä–æ—Å—É: –ø–æ—Å–æ—Ö = üç¢
    r"–±—É–ª–∞–≤–∞|–º–æ–ª–æ—Ç|–∫–∏—Å—Ç–µ–Ω—å|—Ü–µ–ø|–ø–µ—Ä–Ω–∞—á": "üî®",
    r"—Ç–æ–ø–æ—Ä|—Å–µ–∫–∏—Ä–∞|–±–µ—Ä–¥—ã—à": "ü™ì",
    r"–∫–∏–Ω–∂–∞–ª|–Ω–æ–∂(?!–Ω–∏—Ü—ã)": "üî™",
}

ARMOR_MATERIAL_EMOJI = {
    r"–∫–æ–∂–∞–Ω": "üß•",      # –∫–æ–∂–∞–Ω–∞—è/–∫–æ–∂–∞–Ω—ã–π/–∫–æ–∂–∞–Ω–æ–µ
    r"—Ä–æ–±|—Ä—è—Å–∞|–º–∞–Ω—Ç": "üëò",  # —Ä–æ–±–∞/—Ä—è—Å–∞/–º–∞–Ω—Ç–∏—è
}
ARMOR_GENERIC = "üõ°Ô∏è"

FOOD_KEYS = [r"–ø—Ä–æ–≤–∏–∞–Ω—Ç|–µ–¥–∞|–ø–∞–π|–ø–∞—ë–∫|—Ä–∞—Ü–∏–æ–Ω|—Ö–ª–µ–±|–º—è—Å–æ|—Å—É—Ö–ø–∞–π"]
CAMP_KEYS = [r"–∫–æ—Å—Ç—Ä–∞|–∫–æ—Å—Ç—ë—Ä|–ø—Ä–∏–≤–∞–ª|–ø–∞–ª–∞—Ç–∫–∞|–ª–∞–≥–µ—Ä"]

def _match_any(name: str, patterns: dict[str, str]) -> str | None:
    for rx, em in patterns.items():
        if re.search(rx, name, flags=re.IGNORECASE):
            return em
    return None

def _match_list(name: str, patterns: list[str]) -> bool:
    return any(re.search(rx, name, flags=re.IGNORECASE) for rx in patterns)

def emoji_for_item(name: str, kind: str | None = None, material_hint: str | None = None) -> str:
    """
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    kind ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: 'weapon' | 'armor' | 'consumable' | 'camp' | 'misc'
    material_hint ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: 'leather'|'robe'
    """
    n = (name or "").strip()

    # Consumables
    if kind == "consumable" or _match_list(n, FOOD_KEYS):
        return "üçó"
    if kind == "camp" or _match_list(n, CAMP_KEYS):
        return "üå≥"

    # Weapons
    if kind == "weapon" or _match_any(n, WEAPON_EMOJI):
        # –µ—Å–ª–∏ —è–≤–Ω–æ –æ—Ä—É–∂–∏–µ ‚Äî –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∏–¥
        em = _match_any(n, WEAPON_EMOJI)
        return em or "‚öî"

    # Armor
    if kind == "armor" or re.search(r"–±—Ä–æ–Ω|–∫–æ–ª—å—á—É–≥|–ª–∞—Ç—ã|–¥–æ—Å–ø–µ—Ö|–ø–∞–Ω—Ü–∏—Ä", n, re.I):
        # –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
        if material_hint == "leather" or re.search(r"–∫–æ–∂–∞–Ω", n, re.I):
            return ARMOR_MATERIAL_EMOJI[r"–∫–æ–∂–∞–Ω"]
        if material_hint == "robe" or re.search(r"—Ä–æ–±|—Ä—è—Å–∞|–º–∞–Ω—Ç", n, re.I):
            return ARMOR_MATERIAL_EMOJI[r"—Ä–æ–±|—Ä—è—Å–∞|–º–∞–Ω—Ç"]
        return ARMOR_GENERIC

    # –ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–ª–æ–≤–∞–º –æ—Ä—É–∂–∏—è
    em_weap = _match_any(n, WEAPON_EMOJI)
    if em_weap:
        return em_weap

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "üì¶"

def decorate_item_name(name: str, kind: str | None = None, material_hint: str | None = None) -> str:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É 'EMOJI –ù–∞–∑–≤–∞–Ω–∏–µ' """
    return f"{emoji_for_item(name, kind, material_hint)} {name}"
